// <auto-generated />
// Generated from /Omise/Models/Models.tt
// on 2/25/2021 8:42:09 PM
using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace Omise.Models {
    public partial class Account : ModelBase {
        [JsonProperty("email")]
        public string Email { get; set; }
        [JsonProperty("currency")]
        public string Currency { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as Account;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.Email, another.Email) &&
                object.Equals(this.Currency, another.Currency) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (Email != default(string)) {
                    hash = hash * 23 + Email.GetHashCode();
                }
                if (Currency != default(string)) {
                    hash = hash * 23 + Currency.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class Balance : ModelBase {
        [JsonProperty("available")]
        public long Available { get; set; }
        [JsonProperty("total")]
        public long Total { get; set; }
        [JsonProperty("currency")]
        public string Currency { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as Balance;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.Available, another.Available) &&
                object.Equals(this.Total, another.Total) &&
                object.Equals(this.Currency, another.Currency) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (Available != default(long)) {
                    hash = hash * 23 + Available.GetHashCode();
                }
                if (Total != default(long)) {
                    hash = hash * 23 + Total.GetHashCode();
                }
                if (Currency != default(string)) {
                    hash = hash * 23 + Currency.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class Bank : ModelBase {
        [JsonProperty("code")]
        public string Code { get; set; }
        [JsonProperty("name")]
        public string Name { get; set; }
        [JsonProperty("active")]
        public bool Active { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as Bank;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.Code, another.Code) &&
                object.Equals(this.Name, another.Name) &&
                object.Equals(this.Active, another.Active) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (Code != default(string)) {
                    hash = hash * 23 + Code.GetHashCode();
                }
                if (Name != default(string)) {
                    hash = hash * 23 + Name.GetHashCode();
                }
                if (Active != default(bool)) {
                    hash = hash * 23 + Active.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class Barcode : ModelBase {
        [JsonProperty("type")]
        public string Type { get; set; }
        [JsonProperty("image")]
        public Document Image { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as Barcode;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.Type, another.Type) &&
                object.Equals(this.Image, another.Image) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (Type != default(string)) {
                    hash = hash * 23 + Type.GetHashCode();
                }
                if (Image != default(Document)) {
                    hash = hash * 23 + Image.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class BankAccount : ModelBase {
        [JsonProperty("brand")]
        public string Brand { get; set; }
        [JsonProperty("number")]
        public string Number { get; set; }
        [JsonProperty("last_digits")]
        public string LastDigits { get; set; }
        [JsonProperty("name")]
        public string Name { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as BankAccount;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.Brand, another.Brand) &&
                object.Equals(this.Number, another.Number) &&
                object.Equals(this.LastDigits, another.LastDigits) &&
                object.Equals(this.Name, another.Name) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (Brand != default(string)) {
                    hash = hash * 23 + Brand.GetHashCode();
                }
                if (Number != default(string)) {
                    hash = hash * 23 + Number.GetHashCode();
                }
                if (LastDigits != default(string)) {
                    hash = hash * 23 + LastDigits.GetHashCode();
                }
                if (Name != default(string)) {
                    hash = hash * 23 + Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class Capability : ModelBase {
        [JsonProperty("banks")]
        public List<string> Banks { get; set; }
        [JsonProperty("payment_backends")]
        public List<Dictionary<string,PaymentMethod>> PaymentBackends { get; set; }
        [JsonProperty("zero_interest_installments")]
        public bool ZeroInterestInstallments { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as Capability;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.Banks, another.Banks) &&
                object.Equals(this.PaymentBackends, another.PaymentBackends) &&
                object.Equals(this.ZeroInterestInstallments, another.ZeroInterestInstallments) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (Banks != default(List<string>)) {
                    hash = hash * 23 + Banks.GetHashCode();
                }
                if (PaymentBackends != default(List<Dictionary<string,PaymentMethod>>)) {
                    hash = hash * 23 + PaymentBackends.GetHashCode();
                }
                if (ZeroInterestInstallments != default(bool)) {
                    hash = hash * 23 + ZeroInterestInstallments.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class Card : ModelBase {
        [JsonProperty("country")]
        public string Country { get; set; }
        [JsonProperty("city")]
        public string City { get; set; }
        [JsonProperty("bank")]
        public string Bank { get; set; }
        [JsonProperty("postal_code")]
        public string PostalCode { get; set; }
        [JsonProperty("financing")]
        public string Financing { get; set; }
        [JsonProperty("first_digits")]
        public string FirstDigits { get; set; }
        [JsonProperty("last_digits")]
        public string LastDigits { get; set; }
        [JsonProperty("brand")]
        public string Brand { get; set; }
        [JsonProperty("expiration_month")]
        public int ExpirationMonth { get; set; }
        [JsonProperty("expiration_year")]
        public int ExpirationYear { get; set; }
        [JsonProperty("fingerprint")]
        public string Fingerprint { get; set; }
        [JsonProperty("name")]
        public string Name { get; set; }
        [JsonProperty("security_code_check")]
        public bool SecurityCodeCheck { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as Card;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.Country, another.Country) &&
                object.Equals(this.City, another.City) &&
                object.Equals(this.Bank, another.Bank) &&
                object.Equals(this.PostalCode, another.PostalCode) &&
                object.Equals(this.Financing, another.Financing) &&
                object.Equals(this.FirstDigits, another.FirstDigits) &&
                object.Equals(this.LastDigits, another.LastDigits) &&
                object.Equals(this.Brand, another.Brand) &&
                object.Equals(this.ExpirationMonth, another.ExpirationMonth) &&
                object.Equals(this.ExpirationYear, another.ExpirationYear) &&
                object.Equals(this.Fingerprint, another.Fingerprint) &&
                object.Equals(this.Name, another.Name) &&
                object.Equals(this.SecurityCodeCheck, another.SecurityCodeCheck) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (Country != default(string)) {
                    hash = hash * 23 + Country.GetHashCode();
                }
                if (City != default(string)) {
                    hash = hash * 23 + City.GetHashCode();
                }
                if (Bank != default(string)) {
                    hash = hash * 23 + Bank.GetHashCode();
                }
                if (PostalCode != default(string)) {
                    hash = hash * 23 + PostalCode.GetHashCode();
                }
                if (Financing != default(string)) {
                    hash = hash * 23 + Financing.GetHashCode();
                }
                if (FirstDigits != default(string)) {
                    hash = hash * 23 + FirstDigits.GetHashCode();
                }
                if (LastDigits != default(string)) {
                    hash = hash * 23 + LastDigits.GetHashCode();
                }
                if (Brand != default(string)) {
                    hash = hash * 23 + Brand.GetHashCode();
                }
                if (ExpirationMonth != default(int)) {
                    hash = hash * 23 + ExpirationMonth.GetHashCode();
                }
                if (ExpirationYear != default(int)) {
                    hash = hash * 23 + ExpirationYear.GetHashCode();
                }
                if (Fingerprint != default(string)) {
                    hash = hash * 23 + Fingerprint.GetHashCode();
                }
                if (Name != default(string)) {
                    hash = hash * 23 + Name.GetHashCode();
                }
                if (SecurityCodeCheck != default(bool)) {
                    hash = hash * 23 + SecurityCodeCheck.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class Charge : ModelBase {
        [JsonProperty("status")]
        public ChargeStatus Status { get; set; }
        [JsonProperty("amount")]
        public long Amount { get; set; }
        [JsonProperty("currency")]
        public string Currency { get; set; }
        [JsonProperty("description")]
        public string Description { get; set; }
        [JsonProperty("metadata")]
        public IDictionary<string,object> Metadata { get; set; }
        [JsonProperty("capture")]
        public bool Capture { get; set; }
        [JsonProperty("authorized")]
        public bool Authorized { get; set; }
        [JsonProperty("reversed")]
        public bool Reversed { get; set; }
        [JsonProperty("expired")]
        public bool Expired { get; set; }
        [JsonProperty("paid")]
        public bool Paid { get; set; }
        [JsonProperty("transaction")]
        public string Transaction { get; set; }
        [JsonProperty("source_of_fund")]
        public SourceOfFunds SourceOfFund { get; set; }
        [JsonProperty("card")]
        public Card Card { get; set; }
        [JsonProperty("source")]
        public PaymentSource Source { get; set; }
        [JsonProperty("refunded")]
        public long Refunded { get; set; }
        [JsonProperty("refunds")]
        public ScopedList<Refund> Refunds { get; set; }
        [JsonProperty("failure_code")]
        public string FailureCode { get; set; }
        [JsonProperty("failure_message")]
        public string FailureMessage { get; set; }
        [JsonProperty("customer")]
        public string Customer { get; set; }
        [JsonProperty("ip")]
        public string IP { get; set; }
        [JsonProperty("dispute")]
        public Dispute Dispute { get; set; }
        [JsonProperty("return_uri")]
        public string ReturnURI { get; set; }
        [JsonProperty("authorize_uri")]
        public string AuthorizeURI { get; set; }
        [JsonProperty("offsite")]
        public OffsiteTypes Offsite { get; set; }
        [JsonProperty("installment_terms")]
        public int InstallmentTerms { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as Charge;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.Status, another.Status) &&
                object.Equals(this.Amount, another.Amount) &&
                object.Equals(this.Currency, another.Currency) &&
                object.Equals(this.Description, another.Description) &&
                object.Equals(this.Metadata, another.Metadata) &&
                object.Equals(this.Capture, another.Capture) &&
                object.Equals(this.Authorized, another.Authorized) &&
                object.Equals(this.Reversed, another.Reversed) &&
                object.Equals(this.Expired, another.Expired) &&
                object.Equals(this.Paid, another.Paid) &&
                object.Equals(this.Transaction, another.Transaction) &&
                object.Equals(this.SourceOfFund, another.SourceOfFund) &&
                object.Equals(this.Card, another.Card) &&
                object.Equals(this.Source, another.Source) &&
                object.Equals(this.Refunded, another.Refunded) &&
                object.Equals(this.Refunds, another.Refunds) &&
                object.Equals(this.FailureCode, another.FailureCode) &&
                object.Equals(this.FailureMessage, another.FailureMessage) &&
                object.Equals(this.Customer, another.Customer) &&
                object.Equals(this.IP, another.IP) &&
                object.Equals(this.Dispute, another.Dispute) &&
                object.Equals(this.ReturnURI, another.ReturnURI) &&
                object.Equals(this.AuthorizeURI, another.AuthorizeURI) &&
                object.Equals(this.Offsite, another.Offsite) &&
                object.Equals(this.InstallmentTerms, another.InstallmentTerms) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (Status != default(ChargeStatus)) {
                    hash = hash * 23 + Status.GetHashCode();
                }
                if (Amount != default(long)) {
                    hash = hash * 23 + Amount.GetHashCode();
                }
                if (Currency != default(string)) {
                    hash = hash * 23 + Currency.GetHashCode();
                }
                if (Description != default(string)) {
                    hash = hash * 23 + Description.GetHashCode();
                }
                if (Metadata != default(IDictionary<string,object>)) {
                    hash = hash * 23 + Metadata.GetHashCode();
                }
                if (Capture != default(bool)) {
                    hash = hash * 23 + Capture.GetHashCode();
                }
                if (Authorized != default(bool)) {
                    hash = hash * 23 + Authorized.GetHashCode();
                }
                if (Reversed != default(bool)) {
                    hash = hash * 23 + Reversed.GetHashCode();
                }
                if (Expired != default(bool)) {
                    hash = hash * 23 + Expired.GetHashCode();
                }
                if (Paid != default(bool)) {
                    hash = hash * 23 + Paid.GetHashCode();
                }
                if (Transaction != default(string)) {
                    hash = hash * 23 + Transaction.GetHashCode();
                }
                if (SourceOfFund != default(SourceOfFunds)) {
                    hash = hash * 23 + SourceOfFund.GetHashCode();
                }
                if (Card != default(Card)) {
                    hash = hash * 23 + Card.GetHashCode();
                }
                if (Source != default(PaymentSource)) {
                    hash = hash * 23 + Source.GetHashCode();
                }
                if (Refunded != default(long)) {
                    hash = hash * 23 + Refunded.GetHashCode();
                }
                if (Refunds != default(ScopedList<Refund>)) {
                    hash = hash * 23 + Refunds.GetHashCode();
                }
                if (FailureCode != default(string)) {
                    hash = hash * 23 + FailureCode.GetHashCode();
                }
                if (FailureMessage != default(string)) {
                    hash = hash * 23 + FailureMessage.GetHashCode();
                }
                if (Customer != default(string)) {
                    hash = hash * 23 + Customer.GetHashCode();
                }
                if (IP != default(string)) {
                    hash = hash * 23 + IP.GetHashCode();
                }
                if (Dispute != default(Dispute)) {
                    hash = hash * 23 + Dispute.GetHashCode();
                }
                if (ReturnURI != default(string)) {
                    hash = hash * 23 + ReturnURI.GetHashCode();
                }
                if (AuthorizeURI != default(string)) {
                    hash = hash * 23 + AuthorizeURI.GetHashCode();
                }
                if (Offsite != default(OffsiteTypes)) {
                    hash = hash * 23 + Offsite.GetHashCode();
                }
                if (InstallmentTerms != default(int)) {
                    hash = hash * 23 + InstallmentTerms.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class Customer : ModelBase {
        [JsonProperty("default_card")]
        public string DefaultCard { get; set; }
        [JsonProperty("email")]
        public string Email { get; set; }
        [JsonProperty("description")]
        public string Description { get; set; }
        [JsonProperty("metadata")]
        public IDictionary<string,object> Metadata { get; set; }
        [JsonProperty("cards")]
        public ScopedList<Card> Cards { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as Customer;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.DefaultCard, another.DefaultCard) &&
                object.Equals(this.Email, another.Email) &&
                object.Equals(this.Description, another.Description) &&
                object.Equals(this.Metadata, another.Metadata) &&
                object.Equals(this.Cards, another.Cards) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (DefaultCard != default(string)) {
                    hash = hash * 23 + DefaultCard.GetHashCode();
                }
                if (Email != default(string)) {
                    hash = hash * 23 + Email.GetHashCode();
                }
                if (Description != default(string)) {
                    hash = hash * 23 + Description.GetHashCode();
                }
                if (Metadata != default(IDictionary<string,object>)) {
                    hash = hash * 23 + Metadata.GetHashCode();
                }
                if (Cards != default(ScopedList<Card>)) {
                    hash = hash * 23 + Cards.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class Dispute : ModelBase {
        [JsonProperty("amount")]
        public long Amount { get; set; }
        [JsonProperty("currency")]
        public string Currency { get; set; }
        [JsonProperty("status")]
        public DisputeStatus Status { get; set; }
        [JsonProperty("message")]
        public string Message { get; set; }
        [JsonProperty("charge")]
        public string Charge { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as Dispute;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.Amount, another.Amount) &&
                object.Equals(this.Currency, another.Currency) &&
                object.Equals(this.Status, another.Status) &&
                object.Equals(this.Message, another.Message) &&
                object.Equals(this.Charge, another.Charge) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (Amount != default(long)) {
                    hash = hash * 23 + Amount.GetHashCode();
                }
                if (Currency != default(string)) {
                    hash = hash * 23 + Currency.GetHashCode();
                }
                if (Status != default(DisputeStatus)) {
                    hash = hash * 23 + Status.GetHashCode();
                }
                if (Message != default(string)) {
                    hash = hash * 23 + Message.GetHashCode();
                }
                if (Charge != default(string)) {
                    hash = hash * 23 + Charge.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class Document : ModelBase {
        [JsonProperty("download_uri")]
        public string DownloadURI { get; set; }
        [JsonProperty("filename")]
        public string Filename { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as Document;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.DownloadURI, another.DownloadURI) &&
                object.Equals(this.Filename, another.Filename) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (DownloadURI != default(string)) {
                    hash = hash * 23 + DownloadURI.GetHashCode();
                }
                if (Filename != default(string)) {
                    hash = hash * 23 + Filename.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class Event : ModelBase {
        [JsonProperty("key")]
        public string Key { get; set; }
        [JsonProperty("data")]
        public JRaw RawDataJson { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as Event;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.Key, another.Key) &&
                object.Equals(this.RawDataJson, another.RawDataJson) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (Key != default(string)) {
                    hash = hash * 23 + Key.GetHashCode();
                }
                if (RawDataJson != default(JRaw)) {
                    hash = hash * 23 + RawDataJson.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class Forex : ModelBase {
        [JsonProperty("rate")]
        public float Rate { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as Forex;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.Rate, another.Rate) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (Rate != default(float)) {
                    hash = hash * 23 + Rate.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class Link : ModelBase {
        [JsonProperty("amount")]
        public long Amount { get; set; }
        [JsonProperty("currency")]
        public string Currency { get; set; }
        [JsonProperty("used")]
        public bool Used { get; set; }
        [JsonProperty("multiple")]
        public bool Multiple { get; set; }
        [JsonProperty("title")]
        public string Title { get; set; }
        [JsonProperty("description")]
        public string Description { get; set; }
        [JsonProperty("charges")]
        public ScopedList<Charge> Charges { get; set; }
        [JsonProperty("payment_uri")]
        public string PaymentURI { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as Link;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.Amount, another.Amount) &&
                object.Equals(this.Currency, another.Currency) &&
                object.Equals(this.Used, another.Used) &&
                object.Equals(this.Multiple, another.Multiple) &&
                object.Equals(this.Title, another.Title) &&
                object.Equals(this.Description, another.Description) &&
                object.Equals(this.Charges, another.Charges) &&
                object.Equals(this.PaymentURI, another.PaymentURI) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (Amount != default(long)) {
                    hash = hash * 23 + Amount.GetHashCode();
                }
                if (Currency != default(string)) {
                    hash = hash * 23 + Currency.GetHashCode();
                }
                if (Used != default(bool)) {
                    hash = hash * 23 + Used.GetHashCode();
                }
                if (Multiple != default(bool)) {
                    hash = hash * 23 + Multiple.GetHashCode();
                }
                if (Title != default(string)) {
                    hash = hash * 23 + Title.GetHashCode();
                }
                if (Description != default(string)) {
                    hash = hash * 23 + Description.GetHashCode();
                }
                if (Charges != default(ScopedList<Charge>)) {
                    hash = hash * 23 + Charges.GetHashCode();
                }
                if (PaymentURI != default(string)) {
                    hash = hash * 23 + PaymentURI.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class Occurrence : ModelBase {
        [JsonProperty("schedule")]
        public string Schedule { get; set; }
        [JsonProperty("schedule_date")]
        public DateTime ScheduleDate { get; set; }
        [JsonProperty("retry_date")]
        public DateTime RetryDate { get; set; }
        [JsonProperty("processed_at")]
        public DateTime ProcessedAt { get; set; }
        [JsonProperty("status")]
        public OccurrenceStatus Status { get; set; }
        [JsonProperty("message")]
        public String Message { get; set; }
        [JsonProperty("result")]
        public String Result { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as Occurrence;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.Schedule, another.Schedule) &&
                object.Equals(this.ScheduleDate, another.ScheduleDate) &&
                object.Equals(this.RetryDate, another.RetryDate) &&
                object.Equals(this.ProcessedAt, another.ProcessedAt) &&
                object.Equals(this.Status, another.Status) &&
                object.Equals(this.Message, another.Message) &&
                object.Equals(this.Result, another.Result) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (Schedule != default(string)) {
                    hash = hash * 23 + Schedule.GetHashCode();
                }
                if (ScheduleDate != default(DateTime)) {
                    hash = hash * 23 + ScheduleDate.GetHashCode();
                }
                if (RetryDate != default(DateTime)) {
                    hash = hash * 23 + RetryDate.GetHashCode();
                }
                if (ProcessedAt != default(DateTime)) {
                    hash = hash * 23 + ProcessedAt.GetHashCode();
                }
                if (Status != default(OccurrenceStatus)) {
                    hash = hash * 23 + Status.GetHashCode();
                }
                if (Message != default(String)) {
                    hash = hash * 23 + Message.GetHashCode();
                }
                if (Result != default(String)) {
                    hash = hash * 23 + Result.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class PaymentMethod : ModelBase {
        [JsonProperty("type")]
        public string Type { get; set; }
        [JsonProperty("currencies")]
        public List<string> Currencies { get; set; }
        [JsonProperty("brands")]
        public List<string> Brands { get; set; }
        [JsonProperty("allowed_installment_terms")]
        public List<int> AllowedInstallmentTerms { get; set; }
        [JsonProperty("banks")]
        public List<Bank> Banks { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as PaymentMethod;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.Type, another.Type) &&
                object.Equals(this.Currencies, another.Currencies) &&
                object.Equals(this.Brands, another.Brands) &&
                object.Equals(this.AllowedInstallmentTerms, another.AllowedInstallmentTerms) &&
                object.Equals(this.Banks, another.Banks) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (Type != default(string)) {
                    hash = hash * 23 + Type.GetHashCode();
                }
                if (Currencies != default(List<string>)) {
                    hash = hash * 23 + Currencies.GetHashCode();
                }
                if (Brands != default(List<string>)) {
                    hash = hash * 23 + Brands.GetHashCode();
                }
                if (AllowedInstallmentTerms != default(List<int>)) {
                    hash = hash * 23 + AllowedInstallmentTerms.GetHashCode();
                }
                if (Banks != default(List<Bank>)) {
                    hash = hash * 23 + Banks.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class PaymentReference : ModelBase {
        [JsonProperty("omisetaxid")]
        public string OmiseTaxId { get; set; }
        [JsonProperty("reference_number_1")]
        public string ReferenceNumber1 { get; set; }
        [JsonProperty("reference_number_2")]
        public string ReferenceNumber2 { get; set; }
        [JsonProperty("barcode")]
        public string Barcode { get; set; }
        [JsonProperty("expires_at")]
        public DateTime ExpiresAt { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as PaymentReference;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.OmiseTaxId, another.OmiseTaxId) &&
                object.Equals(this.ReferenceNumber1, another.ReferenceNumber1) &&
                object.Equals(this.ReferenceNumber2, another.ReferenceNumber2) &&
                object.Equals(this.Barcode, another.Barcode) &&
                object.Equals(this.ExpiresAt, another.ExpiresAt) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (OmiseTaxId != default(string)) {
                    hash = hash * 23 + OmiseTaxId.GetHashCode();
                }
                if (ReferenceNumber1 != default(string)) {
                    hash = hash * 23 + ReferenceNumber1.GetHashCode();
                }
                if (ReferenceNumber2 != default(string)) {
                    hash = hash * 23 + ReferenceNumber2.GetHashCode();
                }
                if (Barcode != default(string)) {
                    hash = hash * 23 + Barcode.GetHashCode();
                }
                if (ExpiresAt != default(DateTime)) {
                    hash = hash * 23 + ExpiresAt.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class PaymentSource : ModelBase {
        [JsonProperty("type")]
        public OffsiteTypes Type { get; set; }
        [JsonProperty("flow")]
        public FlowTypes Flow { get; set; }
        [JsonProperty("amount")]
        public long Amount { get; set; }
        [JsonProperty("currency")]
        public string Currency { get; set; }
        [JsonProperty("references")]
        public PaymentReference References { get; set; }
        [JsonProperty("barcode")]
        public string Barcode { get; set; }
        [JsonProperty("bank")]
        public string Bank { get; set; }
        [JsonProperty("email")]
        public string Email { get; set; }
        [JsonProperty("phone_number")]
        public string PhoneNumber { get; set; }
        [JsonProperty("scannable_code")]
        public Barcode ScannableCode { get; set; }
        [JsonProperty("store_id")]
        public string StoreId { get; set; }
        [JsonProperty("store_name")]
        public string StoreName { get; set; }
        [JsonProperty("terminal_id")]
        public string TerminalId { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as PaymentSource;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.Type, another.Type) &&
                object.Equals(this.Flow, another.Flow) &&
                object.Equals(this.Amount, another.Amount) &&
                object.Equals(this.Currency, another.Currency) &&
                object.Equals(this.References, another.References) &&
                object.Equals(this.Barcode, another.Barcode) &&
                object.Equals(this.Bank, another.Bank) &&
                object.Equals(this.Email, another.Email) &&
                object.Equals(this.PhoneNumber, another.PhoneNumber) &&
                object.Equals(this.ScannableCode, another.ScannableCode) &&
                object.Equals(this.StoreId, another.StoreId) &&
                object.Equals(this.StoreName, another.StoreName) &&
                object.Equals(this.TerminalId, another.TerminalId) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (Type != default(OffsiteTypes)) {
                    hash = hash * 23 + Type.GetHashCode();
                }
                if (Flow != default(FlowTypes)) {
                    hash = hash * 23 + Flow.GetHashCode();
                }
                if (Amount != default(long)) {
                    hash = hash * 23 + Amount.GetHashCode();
                }
                if (Currency != default(string)) {
                    hash = hash * 23 + Currency.GetHashCode();
                }
                if (References != default(PaymentReference)) {
                    hash = hash * 23 + References.GetHashCode();
                }
                if (Barcode != default(string)) {
                    hash = hash * 23 + Barcode.GetHashCode();
                }
                if (Bank != default(string)) {
                    hash = hash * 23 + Bank.GetHashCode();
                }
                if (Email != default(string)) {
                    hash = hash * 23 + Email.GetHashCode();
                }
                if (PhoneNumber != default(string)) {
                    hash = hash * 23 + PhoneNumber.GetHashCode();
                }
                if (ScannableCode != default(Barcode)) {
                    hash = hash * 23 + ScannableCode.GetHashCode();
                }
                if (StoreId != default(string)) {
                    hash = hash * 23 + StoreId.GetHashCode();
                }
                if (StoreName != default(string)) {
                    hash = hash * 23 + StoreName.GetHashCode();
                }
                if (TerminalId != default(string)) {
                    hash = hash * 23 + TerminalId.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class Receipt : ModelBase {
        [JsonProperty("number")]
        public string Number { get; set; }
        [JsonProperty("customer_name")]
        public string CustomerName { get; set; }
        [JsonProperty("customer_address")]
        public string CustomerAddress { get; set; }
        [JsonProperty("customer_tax_id")]
        public string CustomerTaxId { get; set; }
        [JsonProperty("customer_email")]
        public string CustomerEmail { get; set; }
        [JsonProperty("customer_statement_name")]
        public string CustomerStatementName { get; set; }
        [JsonProperty("company_name")]
        public string CompanyName { get; set; }
        [JsonProperty("company_address")]
        public string CompanyAddress { get; set; }
        [JsonProperty("company_tax_id")]
        public string CompanyTaxId { get; set; }
        [JsonProperty("charge_fee")]
        public long ChargeFee { get; set; }
        [JsonProperty("voided_fee")]
        public long VoidedFee { get; set; }
        [JsonProperty("transfer_fee")]
        public long TransferFee { get; set; }
        [JsonProperty("subtotal")]
        public long Subtotal { get; set; }
        [JsonProperty("vat")]
        public long Vat { get; set; }
        [JsonProperty("wht")]
        public long Wht { get; set; }
        [JsonProperty("total")]
        public long Total { get; set; }
        [JsonProperty("credit_note")]
        public bool CreditNote { get; set; }
        [JsonProperty("currency")]
        public string Currency { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as Receipt;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.Number, another.Number) &&
                object.Equals(this.CustomerName, another.CustomerName) &&
                object.Equals(this.CustomerAddress, another.CustomerAddress) &&
                object.Equals(this.CustomerTaxId, another.CustomerTaxId) &&
                object.Equals(this.CustomerEmail, another.CustomerEmail) &&
                object.Equals(this.CustomerStatementName, another.CustomerStatementName) &&
                object.Equals(this.CompanyName, another.CompanyName) &&
                object.Equals(this.CompanyAddress, another.CompanyAddress) &&
                object.Equals(this.CompanyTaxId, another.CompanyTaxId) &&
                object.Equals(this.ChargeFee, another.ChargeFee) &&
                object.Equals(this.VoidedFee, another.VoidedFee) &&
                object.Equals(this.TransferFee, another.TransferFee) &&
                object.Equals(this.Subtotal, another.Subtotal) &&
                object.Equals(this.Vat, another.Vat) &&
                object.Equals(this.Wht, another.Wht) &&
                object.Equals(this.Total, another.Total) &&
                object.Equals(this.CreditNote, another.CreditNote) &&
                object.Equals(this.Currency, another.Currency) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (Number != default(string)) {
                    hash = hash * 23 + Number.GetHashCode();
                }
                if (CustomerName != default(string)) {
                    hash = hash * 23 + CustomerName.GetHashCode();
                }
                if (CustomerAddress != default(string)) {
                    hash = hash * 23 + CustomerAddress.GetHashCode();
                }
                if (CustomerTaxId != default(string)) {
                    hash = hash * 23 + CustomerTaxId.GetHashCode();
                }
                if (CustomerEmail != default(string)) {
                    hash = hash * 23 + CustomerEmail.GetHashCode();
                }
                if (CustomerStatementName != default(string)) {
                    hash = hash * 23 + CustomerStatementName.GetHashCode();
                }
                if (CompanyName != default(string)) {
                    hash = hash * 23 + CompanyName.GetHashCode();
                }
                if (CompanyAddress != default(string)) {
                    hash = hash * 23 + CompanyAddress.GetHashCode();
                }
                if (CompanyTaxId != default(string)) {
                    hash = hash * 23 + CompanyTaxId.GetHashCode();
                }
                if (ChargeFee != default(long)) {
                    hash = hash * 23 + ChargeFee.GetHashCode();
                }
                if (VoidedFee != default(long)) {
                    hash = hash * 23 + VoidedFee.GetHashCode();
                }
                if (TransferFee != default(long)) {
                    hash = hash * 23 + TransferFee.GetHashCode();
                }
                if (Subtotal != default(long)) {
                    hash = hash * 23 + Subtotal.GetHashCode();
                }
                if (Vat != default(long)) {
                    hash = hash * 23 + Vat.GetHashCode();
                }
                if (Wht != default(long)) {
                    hash = hash * 23 + Wht.GetHashCode();
                }
                if (Total != default(long)) {
                    hash = hash * 23 + Total.GetHashCode();
                }
                if (CreditNote != default(bool)) {
                    hash = hash * 23 + CreditNote.GetHashCode();
                }
                if (Currency != default(string)) {
                    hash = hash * 23 + Currency.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class Recipient : ModelBase {
        [JsonProperty("verified")]
        public bool Verified { get; set; }
        [JsonProperty("active")]
        public bool Active { get; set; }
        [JsonProperty("name")]
        public string Name { get; set; }
        [JsonProperty("email")]
        public string Email { get; set; }
        [JsonProperty("description")]
        public string Description { get; set; }
        [JsonProperty("type")]
        public RecipientType Type { get; set; }
        [JsonProperty("taxid")]
        public string TaxID { get; set; }
        [JsonProperty("bank_account")]
        public BankAccount BankAccount { get; set; }
        [JsonProperty("failure_code")]
        public string FailureCode { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as Recipient;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.Verified, another.Verified) &&
                object.Equals(this.Active, another.Active) &&
                object.Equals(this.Name, another.Name) &&
                object.Equals(this.Email, another.Email) &&
                object.Equals(this.Description, another.Description) &&
                object.Equals(this.Type, another.Type) &&
                object.Equals(this.TaxID, another.TaxID) &&
                object.Equals(this.BankAccount, another.BankAccount) &&
                object.Equals(this.FailureCode, another.FailureCode) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (Verified != default(bool)) {
                    hash = hash * 23 + Verified.GetHashCode();
                }
                if (Active != default(bool)) {
                    hash = hash * 23 + Active.GetHashCode();
                }
                if (Name != default(string)) {
                    hash = hash * 23 + Name.GetHashCode();
                }
                if (Email != default(string)) {
                    hash = hash * 23 + Email.GetHashCode();
                }
                if (Description != default(string)) {
                    hash = hash * 23 + Description.GetHashCode();
                }
                if (Type != default(RecipientType)) {
                    hash = hash * 23 + Type.GetHashCode();
                }
                if (TaxID != default(string)) {
                    hash = hash * 23 + TaxID.GetHashCode();
                }
                if (BankAccount != default(BankAccount)) {
                    hash = hash * 23 + BankAccount.GetHashCode();
                }
                if (FailureCode != default(string)) {
                    hash = hash * 23 + FailureCode.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class Refund : ModelBase {
        [JsonProperty("amount")]
        public long Amount { get; set; }
        [JsonProperty("currency")]
        public string Currency { get; set; }
        [JsonProperty("charge")]
        public string Charge { get; set; }
        [JsonProperty("transaction")]
        public string Transaction { get; set; }
        [JsonProperty("metadata")]
        public IDictionary<string,object> Metadata { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as Refund;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.Amount, another.Amount) &&
                object.Equals(this.Currency, another.Currency) &&
                object.Equals(this.Charge, another.Charge) &&
                object.Equals(this.Transaction, another.Transaction) &&
                object.Equals(this.Metadata, another.Metadata) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (Amount != default(long)) {
                    hash = hash * 23 + Amount.GetHashCode();
                }
                if (Currency != default(string)) {
                    hash = hash * 23 + Currency.GetHashCode();
                }
                if (Charge != default(string)) {
                    hash = hash * 23 + Charge.GetHashCode();
                }
                if (Transaction != default(string)) {
                    hash = hash * 23 + Transaction.GetHashCode();
                }
                if (Metadata != default(IDictionary<string,object>)) {
                    hash = hash * 23 + Metadata.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class Schedule : ModelBase {
        [JsonProperty("status")]
        public ScheduleStatus Status { get; set; }
        [JsonProperty("every")]
        public int Every { get; set; }
        [JsonProperty("period")]
        public SchedulePeriod Period { get; set; }
        [JsonProperty("on")]
        public ScheduleOn On { get; set; }
        [JsonProperty("in_words")]
        public String InWords { get; set; }
        [JsonProperty("start_date")]
        public DateTime StartDate { get; set; }
        [JsonProperty("end_date")]
        public DateTime EndDate { get; set; }
        [JsonProperty("charge")]
        public ChargeScheduling Charge { get; set; }
        [JsonProperty("transfer")]
        public TransferScheduling Transfer { get; set; }
        [JsonProperty("occurrences")]
        public ScopedList<Occurrence> Occurrences { get; set; }
        [JsonProperty("next_occurrences")]
        public ScopedList<Occurrence> NextOccurrences { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as Schedule;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.Status, another.Status) &&
                object.Equals(this.Every, another.Every) &&
                object.Equals(this.Period, another.Period) &&
                object.Equals(this.On, another.On) &&
                object.Equals(this.InWords, another.InWords) &&
                object.Equals(this.StartDate, another.StartDate) &&
                object.Equals(this.EndDate, another.EndDate) &&
                object.Equals(this.Charge, another.Charge) &&
                object.Equals(this.Transfer, another.Transfer) &&
                object.Equals(this.Occurrences, another.Occurrences) &&
                object.Equals(this.NextOccurrences, another.NextOccurrences) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (Status != default(ScheduleStatus)) {
                    hash = hash * 23 + Status.GetHashCode();
                }
                if (Every != default(int)) {
                    hash = hash * 23 + Every.GetHashCode();
                }
                if (Period != default(SchedulePeriod)) {
                    hash = hash * 23 + Period.GetHashCode();
                }
                if (On != default(ScheduleOn)) {
                    hash = hash * 23 + On.GetHashCode();
                }
                if (InWords != default(String)) {
                    hash = hash * 23 + InWords.GetHashCode();
                }
                if (StartDate != default(DateTime)) {
                    hash = hash * 23 + StartDate.GetHashCode();
                }
                if (EndDate != default(DateTime)) {
                    hash = hash * 23 + EndDate.GetHashCode();
                }
                if (Charge != default(ChargeScheduling)) {
                    hash = hash * 23 + Charge.GetHashCode();
                }
                if (Transfer != default(TransferScheduling)) {
                    hash = hash * 23 + Transfer.GetHashCode();
                }
                if (Occurrences != default(ScopedList<Occurrence>)) {
                    hash = hash * 23 + Occurrences.GetHashCode();
                }
                if (NextOccurrences != default(ScopedList<Occurrence>)) {
                    hash = hash * 23 + NextOccurrences.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class ScheduleOn : ModelBase {
        [JsonProperty("weekdays")]
        public Weekdays[] Weekdays { get; set; }
        [JsonProperty("days_of_month")]
        public int[] DaysOfMonth { get; set; }
        [JsonProperty("weekday_of_month")]
        public String WeekdayOfMonth { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as ScheduleOn;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.Weekdays, another.Weekdays) &&
                object.Equals(this.DaysOfMonth, another.DaysOfMonth) &&
                object.Equals(this.WeekdayOfMonth, another.WeekdayOfMonth) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (Weekdays != default(Weekdays[])) {
                    hash = hash * 23 + Weekdays.GetHashCode();
                }
                if (DaysOfMonth != default(int[])) {
                    hash = hash * 23 + DaysOfMonth.GetHashCode();
                }
                if (WeekdayOfMonth != default(String)) {
                    hash = hash * 23 + WeekdayOfMonth.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class Token : ModelBase {
        [JsonProperty("used")]
        public bool Used { get; set; }
        [JsonProperty("card")]
        public Card Card { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as Token;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.Used, another.Used) &&
                object.Equals(this.Card, another.Card) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (Used != default(bool)) {
                    hash = hash * 23 + Used.GetHashCode();
                }
                if (Card != default(Card)) {
                    hash = hash * 23 + Card.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class Transaction : ModelBase {
        [JsonProperty("amount")]
        public long Amount { get; set; }
        [JsonProperty("currency")]
        public string Currency { get; set; }
        [JsonProperty("type")]
        public TransactionType Type { get; set; }
        [JsonProperty("source")]
        public string Source { get; set; }
        [JsonProperty("transferable")]
        public DateTime Transferable { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as Transaction;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.Amount, another.Amount) &&
                object.Equals(this.Currency, another.Currency) &&
                object.Equals(this.Type, another.Type) &&
                object.Equals(this.Source, another.Source) &&
                object.Equals(this.Transferable, another.Transferable) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (Amount != default(long)) {
                    hash = hash * 23 + Amount.GetHashCode();
                }
                if (Currency != default(string)) {
                    hash = hash * 23 + Currency.GetHashCode();
                }
                if (Type != default(TransactionType)) {
                    hash = hash * 23 + Type.GetHashCode();
                }
                if (Source != default(string)) {
                    hash = hash * 23 + Source.GetHashCode();
                }
                if (Transferable != default(DateTime)) {
                    hash = hash * 23 + Transferable.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class Transfer : ModelBase {
        [JsonProperty("recipient")]
        public string Recipient { get; set; }
        [JsonProperty("bankaccount")]
        public BankAccount BankAccount { get; set; }
        [JsonProperty("sent")]
        public bool Sent { get; set; }
        [JsonProperty("paid")]
        public bool Paid { get; set; }
        [JsonProperty("fee")]
        public long Fee { get; set; }
        [JsonProperty("amount")]
        public long Amount { get; set; }
        [JsonProperty("currency")]
        public string Currency { get; set; }
        [JsonProperty("fail_fast")]
        public bool FailFast { get; set; }
        [JsonProperty("failure_code")]
        public string FailureCode { get; set; }
        [JsonProperty("failure_message")]
        public string FailureMessage { get; set; }
        [JsonProperty("transaction")]
        public string Transaction { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as Transfer;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.Recipient, another.Recipient) &&
                object.Equals(this.BankAccount, another.BankAccount) &&
                object.Equals(this.Sent, another.Sent) &&
                object.Equals(this.Paid, another.Paid) &&
                object.Equals(this.Fee, another.Fee) &&
                object.Equals(this.Amount, another.Amount) &&
                object.Equals(this.Currency, another.Currency) &&
                object.Equals(this.FailFast, another.FailFast) &&
                object.Equals(this.FailureCode, another.FailureCode) &&
                object.Equals(this.FailureMessage, another.FailureMessage) &&
                object.Equals(this.Transaction, another.Transaction) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (Recipient != default(string)) {
                    hash = hash * 23 + Recipient.GetHashCode();
                }
                if (BankAccount != default(BankAccount)) {
                    hash = hash * 23 + BankAccount.GetHashCode();
                }
                if (Sent != default(bool)) {
                    hash = hash * 23 + Sent.GetHashCode();
                }
                if (Paid != default(bool)) {
                    hash = hash * 23 + Paid.GetHashCode();
                }
                if (Fee != default(long)) {
                    hash = hash * 23 + Fee.GetHashCode();
                }
                if (Amount != default(long)) {
                    hash = hash * 23 + Amount.GetHashCode();
                }
                if (Currency != default(string)) {
                    hash = hash * 23 + Currency.GetHashCode();
                }
                if (FailFast != default(bool)) {
                    hash = hash * 23 + FailFast.GetHashCode();
                }
                if (FailureCode != default(string)) {
                    hash = hash * 23 + FailureCode.GetHashCode();
                }
                if (FailureMessage != default(string)) {
                    hash = hash * 23 + FailureMessage.GetHashCode();
                }
                if (Transaction != default(string)) {
                    hash = hash * 23 + Transaction.GetHashCode();
                }

                return hash;
            }
        }
    }


    public partial class ModelTypes {
        static readonly IDictionary<string, Type> lookup = new Dictionary<string, Type>
        {
            { "account", typeof(Account) },
            { "balance", typeof(Balance) },
            { "bank", typeof(Bank) },
            { "barcode", typeof(Barcode) },
            { "bank_account", typeof(BankAccount) },
            { "capability", typeof(Capability) },
            { "card", typeof(Card) },
            { "charge", typeof(Charge) },
            { "customer", typeof(Customer) },
            { "dispute", typeof(Dispute) },
            { "document", typeof(Document) },
            { "event", typeof(Event) },
            { "forex", typeof(Forex) },
            { "link", typeof(Link) },
            { "occurrence", typeof(Occurrence) },
            { "paymentmethod", typeof(PaymentMethod) },
            { "paymentreference", typeof(PaymentReference) },
            { "paymentsource", typeof(PaymentSource) },
            { "receipt", typeof(Receipt) },
            { "recipient", typeof(Recipient) },
            { "refund", typeof(Refund) },
            { "schedule", typeof(Schedule) },
            { "scheduleon", typeof(ScheduleOn) },
            { "token", typeof(Token) },
            { "transaction", typeof(Transaction) },
            { "transfer", typeof(Transfer) },
        };

        static readonly IDictionary<Type, string> reverseLookup = new Dictionary<Type, string>
        {
            { typeof(Account), "account" },
            { typeof(Balance), "balance" },
            { typeof(Bank), "bank" },
            { typeof(Barcode), "barcode" },
            { typeof(BankAccount), "bank_account" },
            { typeof(Capability), "capability" },
            { typeof(Card), "card" },
            { typeof(Charge), "charge" },
            { typeof(Customer), "customer" },
            { typeof(Dispute), "dispute" },
            { typeof(Document), "document" },
            { typeof(Event), "event" },
            { typeof(Forex), "forex" },
            { typeof(Link), "link" },
            { typeof(Occurrence), "occurrence" },
            { typeof(PaymentMethod), "paymentmethod" },
            { typeof(PaymentReference), "paymentreference" },
            { typeof(PaymentSource), "paymentsource" },
            { typeof(Receipt), "receipt" },
            { typeof(Recipient), "recipient" },
            { typeof(Refund), "refund" },
            { typeof(Schedule), "schedule" },
            { typeof(ScheduleOn), "scheduleon" },
            { typeof(Token), "token" },
            { typeof(Transaction), "transaction" },
            { typeof(Transfer), "transfer" },
        };
    }
}
