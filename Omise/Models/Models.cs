// <auto-generated />
// Generated from /Omise/Models/Models.tt
// on 19/8/2567 พ.ศ. 16:56:07
using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace Omise.Models {
    public partial class Account : ModelBase {
        [JsonProperty("email")]
        public string Email { get; set; }
        [JsonProperty("currency")]
        public string Currency { get; set; }
        [JsonProperty("team")]
        public string Team { get; set; }
        [JsonProperty("country")]
        public string Country { get; set; }
        [JsonProperty("supported_currencies")]
        public List<string> SupportedCurrencies { get; set; }
        [JsonProperty("api_version")]
        public string ApiVersion { get; set; }
        [JsonProperty("auto_activate_recipients")]
        public bool AutoActivateRecipients { get; set; }
        [JsonProperty("chain_enabled")]
        public bool ChainEnabled { get; set; }
        [JsonProperty("zero_interest_installments")]
        public bool ZeroInterestInstallments { get; set; }
        [JsonProperty("chain_return_uri")]
        public string ChainReturnUri { get; set; }
        [JsonProperty("webhook_uri")]
        public string WebhookUri { get; set; }
        [JsonProperty("metadata_export_keys")]
        public IDictionary<string,object> MetadataExportKeys { get; set; }
        [JsonProperty("chaining_allowed")]
        public bool ChainingAllowed { get; set; }
        [JsonProperty("last_updated_api_version")]
        public string LastUpdatedApiVersion { get; set; }
        [JsonProperty("transfer_config")]
        public IDictionary<string,object> TransferConfig { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as Account;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.Email, another.Email) &&
                object.Equals(this.Currency, another.Currency) &&
                object.Equals(this.Team, another.Team) &&
                object.Equals(this.Country, another.Country) &&
                object.Equals(this.SupportedCurrencies, another.SupportedCurrencies) &&
                object.Equals(this.ApiVersion, another.ApiVersion) &&
                object.Equals(this.AutoActivateRecipients, another.AutoActivateRecipients) &&
                object.Equals(this.ChainEnabled, another.ChainEnabled) &&
                object.Equals(this.ZeroInterestInstallments, another.ZeroInterestInstallments) &&
                object.Equals(this.ChainReturnUri, another.ChainReturnUri) &&
                object.Equals(this.WebhookUri, another.WebhookUri) &&
                object.Equals(this.MetadataExportKeys, another.MetadataExportKeys) &&
                object.Equals(this.ChainingAllowed, another.ChainingAllowed) &&
                object.Equals(this.LastUpdatedApiVersion, another.LastUpdatedApiVersion) &&
                object.Equals(this.TransferConfig, another.TransferConfig) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (Email != default(string)) {
                    hash = hash * 23 + Email.GetHashCode();
                }
                if (Currency != default(string)) {
                    hash = hash * 23 + Currency.GetHashCode();
                }
                if (Team != default(string)) {
                    hash = hash * 23 + Team.GetHashCode();
                }
                if (Country != default(string)) {
                    hash = hash * 23 + Country.GetHashCode();
                }
                if (SupportedCurrencies != default(List<string>)) {
                    hash = hash * 23 + SupportedCurrencies.GetHashCode();
                }
                if (ApiVersion != default(string)) {
                    hash = hash * 23 + ApiVersion.GetHashCode();
                }
                if (AutoActivateRecipients != default(bool)) {
                    hash = hash * 23 + AutoActivateRecipients.GetHashCode();
                }
                if (ChainEnabled != default(bool)) {
                    hash = hash * 23 + ChainEnabled.GetHashCode();
                }
                if (ZeroInterestInstallments != default(bool)) {
                    hash = hash * 23 + ZeroInterestInstallments.GetHashCode();
                }
                if (ChainReturnUri != default(string)) {
                    hash = hash * 23 + ChainReturnUri.GetHashCode();
                }
                if (WebhookUri != default(string)) {
                    hash = hash * 23 + WebhookUri.GetHashCode();
                }
                if (MetadataExportKeys != default(IDictionary<string,object>)) {
                    hash = hash * 23 + MetadataExportKeys.GetHashCode();
                }
                if (ChainingAllowed != default(bool)) {
                    hash = hash * 23 + ChainingAllowed.GetHashCode();
                }
                if (LastUpdatedApiVersion != default(string)) {
                    hash = hash * 23 + LastUpdatedApiVersion.GetHashCode();
                }
                if (TransferConfig != default(IDictionary<string,object>)) {
                    hash = hash * 23 + TransferConfig.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class Balance : ModelBase {
        [JsonProperty("available")]
        public long Available { get; set; }
        [JsonProperty("total")]
        public long Total { get; set; }
        [JsonProperty("currency")]
        public string Currency { get; set; }
        [JsonProperty("transferable")]
        public long Transferable { get; set; }
        [JsonProperty("reserve")]
        public long Reserve { get; set; }
        [JsonProperty("on_hold")]
        public long OnHold { get; set; }
        [JsonProperty("at")]
        public DateTime At { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as Balance;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.Available, another.Available) &&
                object.Equals(this.Total, another.Total) &&
                object.Equals(this.Currency, another.Currency) &&
                object.Equals(this.Transferable, another.Transferable) &&
                object.Equals(this.Reserve, another.Reserve) &&
                object.Equals(this.OnHold, another.OnHold) &&
                object.Equals(this.At, another.At) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (Available != default(long)) {
                    hash = hash * 23 + Available.GetHashCode();
                }
                if (Total != default(long)) {
                    hash = hash * 23 + Total.GetHashCode();
                }
                if (Currency != default(string)) {
                    hash = hash * 23 + Currency.GetHashCode();
                }
                if (Transferable != default(long)) {
                    hash = hash * 23 + Transferable.GetHashCode();
                }
                if (Reserve != default(long)) {
                    hash = hash * 23 + Reserve.GetHashCode();
                }
                if (OnHold != default(long)) {
                    hash = hash * 23 + OnHold.GetHashCode();
                }
                if (At != default(DateTime)) {
                    hash = hash * 23 + At.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class Bank : ModelBase {
        [JsonProperty("code")]
        public string Code { get; set; }
        [JsonProperty("name")]
        public string Name { get; set; }
        [JsonProperty("active")]
        public bool Active { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as Bank;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.Code, another.Code) &&
                object.Equals(this.Name, another.Name) &&
                object.Equals(this.Active, another.Active) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (Code != default(string)) {
                    hash = hash * 23 + Code.GetHashCode();
                }
                if (Name != default(string)) {
                    hash = hash * 23 + Name.GetHashCode();
                }
                if (Active != default(bool)) {
                    hash = hash * 23 + Active.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class Barcode : ModelBase {
        [JsonProperty("type")]
        public string Type { get; set; }
        [JsonProperty("image")]
        public Document Image { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as Barcode;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.Type, another.Type) &&
                object.Equals(this.Image, another.Image) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (Type != default(string)) {
                    hash = hash * 23 + Type.GetHashCode();
                }
                if (Image != default(Document)) {
                    hash = hash * 23 + Image.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class BankAccount : ModelBase {
        [JsonProperty("brand")]
        public string Brand { get; set; }
        [JsonProperty("last_digits")]
        public string LastDigits { get; set; }
        [JsonProperty("name")]
        public string Name { get; set; }
        [JsonProperty("accountnumber")]
        public string AccountNumber { get; set; }
        [JsonProperty("type")]
        public string Type { get; set; }
        [JsonProperty("bank_code")]
        public string BankCode { get; set; }
        [JsonProperty("branch_code")]
        public string BranchCode { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as BankAccount;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.Brand, another.Brand) &&
                object.Equals(this.LastDigits, another.LastDigits) &&
                object.Equals(this.Name, another.Name) &&
                object.Equals(this.AccountNumber, another.AccountNumber) &&
                object.Equals(this.Type, another.Type) &&
                object.Equals(this.BankCode, another.BankCode) &&
                object.Equals(this.BranchCode, another.BranchCode) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (Brand != default(string)) {
                    hash = hash * 23 + Brand.GetHashCode();
                }
                if (LastDigits != default(string)) {
                    hash = hash * 23 + LastDigits.GetHashCode();
                }
                if (Name != default(string)) {
                    hash = hash * 23 + Name.GetHashCode();
                }
                if (AccountNumber != default(string)) {
                    hash = hash * 23 + AccountNumber.GetHashCode();
                }
                if (Type != default(string)) {
                    hash = hash * 23 + Type.GetHashCode();
                }
                if (BankCode != default(string)) {
                    hash = hash * 23 + BankCode.GetHashCode();
                }
                if (BranchCode != default(string)) {
                    hash = hash * 23 + BranchCode.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class Capability : ModelBase {
        [JsonProperty("banks")]
        public List<string> Banks { get; set; }
        [JsonProperty("payment_backends")]
        public List<Dictionary<string,PaymentMethod>> PaymentBackends { get; set; }
        [JsonProperty("zero_interest_installments")]
        public bool ZeroInterestInstallments { get; set; }
        [JsonProperty("limits")]
        public Limits Limits { get; set; }
        [JsonProperty("payment_methods")]
        public ScopedList<PaymentMethod> PaymentMethods { get; set; }
        [JsonProperty("country")]
        public string Country { get; set; }
        [JsonProperty("tokenization_methods")]
        public List<string> TokenizationMethods { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as Capability;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.Banks, another.Banks) &&
                object.Equals(this.PaymentBackends, another.PaymentBackends) &&
                object.Equals(this.ZeroInterestInstallments, another.ZeroInterestInstallments) &&
                object.Equals(this.Limits, another.Limits) &&
                object.Equals(this.PaymentMethods, another.PaymentMethods) &&
                object.Equals(this.Country, another.Country) &&
                object.Equals(this.TokenizationMethods, another.TokenizationMethods) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (Banks != default(List<string>)) {
                    hash = hash * 23 + Banks.GetHashCode();
                }
                if (PaymentBackends != default(List<Dictionary<string,PaymentMethod>>)) {
                    hash = hash * 23 + PaymentBackends.GetHashCode();
                }
                if (ZeroInterestInstallments != default(bool)) {
                    hash = hash * 23 + ZeroInterestInstallments.GetHashCode();
                }
                if (Limits != default(Limits)) {
                    hash = hash * 23 + Limits.GetHashCode();
                }
                if (PaymentMethods != default(ScopedList<PaymentMethod>)) {
                    hash = hash * 23 + PaymentMethods.GetHashCode();
                }
                if (Country != default(string)) {
                    hash = hash * 23 + Country.GetHashCode();
                }
                if (TokenizationMethods != default(List<string>)) {
                    hash = hash * 23 + TokenizationMethods.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class Limits : ModelBase {
        [JsonProperty("charge_amount")]
        public MaxMin ChargeAmount { get; set; }
        [JsonProperty("transfer_amount")]
        public MaxMin TransferAmount { get; set; }
        [JsonProperty("installment_amount")]
        public Min InstallmentAmount { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as Limits;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.ChargeAmount, another.ChargeAmount) &&
                object.Equals(this.TransferAmount, another.TransferAmount) &&
                object.Equals(this.InstallmentAmount, another.InstallmentAmount) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (ChargeAmount != default(MaxMin)) {
                    hash = hash * 23 + ChargeAmount.GetHashCode();
                }
                if (TransferAmount != default(MaxMin)) {
                    hash = hash * 23 + TransferAmount.GetHashCode();
                }
                if (InstallmentAmount != default(Min)) {
                    hash = hash * 23 + InstallmentAmount.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class MaxMin : ModelBase {
        [JsonProperty("max")]
        public long Max { get; set; }
        [JsonProperty("min")]
        public long Min { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as MaxMin;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.Max, another.Max) &&
                object.Equals(this.Min, another.Min) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (Max != default(long)) {
                    hash = hash * 23 + Max.GetHashCode();
                }
                if (Min != default(long)) {
                    hash = hash * 23 + Min.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class Min : ModelBase {
        [JsonProperty("min")]
        public long MinAmount { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as Min;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.MinAmount, another.MinAmount) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (MinAmount != default(long)) {
                    hash = hash * 23 + MinAmount.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class Card : ModelBase {
        [JsonProperty("country")]
        public string Country { get; set; }
        [JsonProperty("city")]
        public string City { get; set; }
        [JsonProperty("bank")]
        public string Bank { get; set; }
        [JsonProperty("postal_code")]
        public string PostalCode { get; set; }
        [JsonProperty("financing")]
        public string Financing { get; set; }
        [JsonProperty("first_digits")]
        public string FirstDigits { get; set; }
        [JsonProperty("last_digits")]
        public string LastDigits { get; set; }
        [JsonProperty("brand")]
        public string Brand { get; set; }
        [JsonProperty("expiration_month")]
        public int ExpirationMonth { get; set; }
        [JsonProperty("expiration_year")]
        public int ExpirationYear { get; set; }
        [JsonProperty("fingerprint")]
        public string Fingerprint { get; set; }
        [JsonProperty("name")]
        public string Name { get; set; }
        [JsonProperty("security_code_check")]
        public bool SecurityCodeCheck { get; set; }
        [JsonProperty("deleted")]
        public bool Deleted { get; set; }
        [JsonProperty("street1")]
        public string Street1 { get; set; }
        [JsonProperty("street2")]
        public string Street2 { get; set; }
        [JsonProperty("state")]
        public string State { get; set; }
        [JsonProperty("phone_number")]
        public string PhoneNumber { get; set; }
        [JsonProperty("tokenization_method")]
        public string TokenizationMethod { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as Card;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.Country, another.Country) &&
                object.Equals(this.City, another.City) &&
                object.Equals(this.Bank, another.Bank) &&
                object.Equals(this.PostalCode, another.PostalCode) &&
                object.Equals(this.Financing, another.Financing) &&
                object.Equals(this.FirstDigits, another.FirstDigits) &&
                object.Equals(this.LastDigits, another.LastDigits) &&
                object.Equals(this.Brand, another.Brand) &&
                object.Equals(this.ExpirationMonth, another.ExpirationMonth) &&
                object.Equals(this.ExpirationYear, another.ExpirationYear) &&
                object.Equals(this.Fingerprint, another.Fingerprint) &&
                object.Equals(this.Name, another.Name) &&
                object.Equals(this.SecurityCodeCheck, another.SecurityCodeCheck) &&
                object.Equals(this.Deleted, another.Deleted) &&
                object.Equals(this.Street1, another.Street1) &&
                object.Equals(this.Street2, another.Street2) &&
                object.Equals(this.State, another.State) &&
                object.Equals(this.PhoneNumber, another.PhoneNumber) &&
                object.Equals(this.TokenizationMethod, another.TokenizationMethod) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (Country != default(string)) {
                    hash = hash * 23 + Country.GetHashCode();
                }
                if (City != default(string)) {
                    hash = hash * 23 + City.GetHashCode();
                }
                if (Bank != default(string)) {
                    hash = hash * 23 + Bank.GetHashCode();
                }
                if (PostalCode != default(string)) {
                    hash = hash * 23 + PostalCode.GetHashCode();
                }
                if (Financing != default(string)) {
                    hash = hash * 23 + Financing.GetHashCode();
                }
                if (FirstDigits != default(string)) {
                    hash = hash * 23 + FirstDigits.GetHashCode();
                }
                if (LastDigits != default(string)) {
                    hash = hash * 23 + LastDigits.GetHashCode();
                }
                if (Brand != default(string)) {
                    hash = hash * 23 + Brand.GetHashCode();
                }
                if (ExpirationMonth != default(int)) {
                    hash = hash * 23 + ExpirationMonth.GetHashCode();
                }
                if (ExpirationYear != default(int)) {
                    hash = hash * 23 + ExpirationYear.GetHashCode();
                }
                if (Fingerprint != default(string)) {
                    hash = hash * 23 + Fingerprint.GetHashCode();
                }
                if (Name != default(string)) {
                    hash = hash * 23 + Name.GetHashCode();
                }
                if (SecurityCodeCheck != default(bool)) {
                    hash = hash * 23 + SecurityCodeCheck.GetHashCode();
                }
                if (Deleted != default(bool)) {
                    hash = hash * 23 + Deleted.GetHashCode();
                }
                if (Street1 != default(string)) {
                    hash = hash * 23 + Street1.GetHashCode();
                }
                if (Street2 != default(string)) {
                    hash = hash * 23 + Street2.GetHashCode();
                }
                if (State != default(string)) {
                    hash = hash * 23 + State.GetHashCode();
                }
                if (PhoneNumber != default(string)) {
                    hash = hash * 23 + PhoneNumber.GetHashCode();
                }
                if (TokenizationMethod != default(string)) {
                    hash = hash * 23 + TokenizationMethod.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class Charge : ModelBase {
        [JsonProperty("status")]
        public ChargeStatus Status { get; set; }
        [JsonProperty("amount")]
        public long Amount { get; set; }
        [JsonProperty("currency")]
        public string Currency { get; set; }
        [JsonProperty("authorization_type")]
        public AuthTypes AuthorizationType { get; set; }
        [JsonProperty("description")]
        public string Description { get; set; }
        [JsonProperty("expires_at")]
        public DateTime ExpiresAt { get; set; }
        [JsonProperty("metadata")]
        public IDictionary<string,object> Metadata { get; set; }
        [JsonProperty("capture")]
        public bool Capture { get; set; }
        [JsonProperty("authorized")]
        public bool Authorized { get; set; }
        [JsonProperty("reversed")]
        public bool Reversed { get; set; }
        [JsonProperty("expired")]
        public bool Expired { get; set; }
        [JsonProperty("paid")]
        public bool Paid { get; set; }
        [JsonProperty("paid_at")]
        public DateTime PaidAt { get; set; }
        [JsonProperty("transaction")]
        public string Transaction { get; set; }
        [JsonProperty("source_of_fund")]
        public SourceOfFunds SourceOfFund { get; set; }
        [JsonProperty("card")]
        public Card Card { get; set; }
        [JsonProperty("source")]
        public PaymentSource Source { get; set; }
        [JsonProperty("refunded")]
        public long Refunded { get; set; }
        [JsonProperty("refunds")]
        public ScopedList<Refund> Refunds { get; set; }
        [JsonProperty("failure_code")]
        public string FailureCode { get; set; }
        [JsonProperty("failure_message")]
        public string FailureMessage { get; set; }
        [JsonProperty("customer")]
        public string Customer { get; set; }
        [JsonProperty("ip")]
        public string IP { get; set; }
        [JsonProperty("dispute")]
        public Dispute Dispute { get; set; }
        [JsonProperty("return_uri")]
        public string ReturnURI { get; set; }
        [JsonProperty("authorize_uri")]
        public string AuthorizeURI { get; set; }
        [JsonProperty("offsite")]
        public OffsiteTypes Offsite { get; set; }
        [JsonProperty("installment_terms")]
        public int InstallmentTerms { get; set; }
        [JsonProperty("platform_fee")]
        public PlatformFee PlatformFee { get; set; }
        [JsonProperty("acquirer_reference_number")]
        public string? AcquirerReferenceNumber { get; set; }
        [JsonProperty("approval_code")]
        public string ApprovalCode { get; set; }
        [JsonProperty("authorized_amount")]
        public long AuthorizedAmount { get; set; }
        [JsonProperty("authorized_at")]
        public DateTime AuthorizedAt { get; set; }
        [JsonProperty("branch")]
        public string Branch { get; set; }
        [JsonProperty("can_perform_void")]
        public bool CanPerformVoid { get; set; }
        [JsonProperty("capturable")]
        public bool Capturable { get; set; }
        [JsonProperty("captured_amount")]
        public long CapturedAmount { get; set; }
        [JsonProperty("device")]
        public string Device { get; set; }
        [JsonProperty("disputable")]
        public bool Disputable { get; set; }
        [JsonProperty("expired_at")]
        public DateTime ExpiredAt { get; set; }
        [JsonProperty("fee")]
        public long Fee { get; set; }
        [JsonProperty("fee_vat")]
        public long FeeVat { get; set; }
        [JsonProperty("funding_amount")]
        public long FundingAmount { get; set; }
        [JsonProperty("funding_currency")]
        public string FundingCurrency { get; set; }
        [JsonProperty("interest")]
        public long Interest { get; set; }
        [JsonProperty("interest_vat")]
        public long InterestVat { get; set; }
        [JsonProperty("link")]
        public string Link { get; set; }
        [JsonProperty("linked_account")]
        public LinkedAccount LinkedAccount { get; set; }
        [JsonProperty("merchant_advice")]
        public string MerchantAdvice { get; set; }
        [JsonProperty("merchant_name")]
        public string MerchantName { get; set; }
        [JsonProperty("merchant_uid")]
        public string MerchantUid { get; set; }
        [JsonProperty("net")]
        public long Net { get; set; }
        [JsonProperty("partially_refundable")]
        public bool PartiallyRefundable { get; set; }
        [JsonProperty("refundable")]
        public bool Refundable { get; set; }
        [JsonProperty("refundedamount")]
        public long RefundedAmount { get; set; }
        [JsonProperty("reversed_at")]
        public DateTime ReversedAt { get; set; }
        [JsonProperty("reversible")]
        public bool Reversible { get; set; }
        [JsonProperty("schedule")]
        public string Schedule { get; set; }
        [JsonProperty("terminal")]
        public string Terminal { get; set; }
        [JsonProperty("transaction_fees")]
        public TransactionFees TransactionFees { get; set; }
        [JsonProperty("unmanaged_payment")]
        public UnmanagedPayment UnmanagedPayment { get; set; }
        [JsonProperty("voided")]
        public bool Voided { get; set; }
        [JsonProperty("zero_interest_installments")]
        public bool zeroInterestInstallments { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as Charge;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.Status, another.Status) &&
                object.Equals(this.Amount, another.Amount) &&
                object.Equals(this.Currency, another.Currency) &&
                object.Equals(this.AuthorizationType, another.AuthorizationType) &&
                object.Equals(this.Description, another.Description) &&
                object.Equals(this.ExpiresAt, another.ExpiresAt) &&
                object.Equals(this.Metadata, another.Metadata) &&
                object.Equals(this.Capture, another.Capture) &&
                object.Equals(this.Authorized, another.Authorized) &&
                object.Equals(this.Reversed, another.Reversed) &&
                object.Equals(this.Expired, another.Expired) &&
                object.Equals(this.Paid, another.Paid) &&
                object.Equals(this.PaidAt, another.PaidAt) &&
                object.Equals(this.Transaction, another.Transaction) &&
                object.Equals(this.SourceOfFund, another.SourceOfFund) &&
                object.Equals(this.Card, another.Card) &&
                object.Equals(this.Source, another.Source) &&
                object.Equals(this.Refunded, another.Refunded) &&
                object.Equals(this.Refunds, another.Refunds) &&
                object.Equals(this.FailureCode, another.FailureCode) &&
                object.Equals(this.FailureMessage, another.FailureMessage) &&
                object.Equals(this.Customer, another.Customer) &&
                object.Equals(this.IP, another.IP) &&
                object.Equals(this.Dispute, another.Dispute) &&
                object.Equals(this.ReturnURI, another.ReturnURI) &&
                object.Equals(this.AuthorizeURI, another.AuthorizeURI) &&
                object.Equals(this.Offsite, another.Offsite) &&
                object.Equals(this.InstallmentTerms, another.InstallmentTerms) &&
                object.Equals(this.PlatformFee, another.PlatformFee) &&
                object.Equals(this.AcquirerReferenceNumber, another.AcquirerReferenceNumber) &&
                object.Equals(this.ApprovalCode, another.ApprovalCode) &&
                object.Equals(this.AuthorizedAmount, another.AuthorizedAmount) &&
                object.Equals(this.AuthorizedAt, another.AuthorizedAt) &&
                object.Equals(this.Branch, another.Branch) &&
                object.Equals(this.CanPerformVoid, another.CanPerformVoid) &&
                object.Equals(this.Capturable, another.Capturable) &&
                object.Equals(this.CapturedAmount, another.CapturedAmount) &&
                object.Equals(this.Device, another.Device) &&
                object.Equals(this.Disputable, another.Disputable) &&
                object.Equals(this.ExpiredAt, another.ExpiredAt) &&
                object.Equals(this.Fee, another.Fee) &&
                object.Equals(this.FeeVat, another.FeeVat) &&
                object.Equals(this.FundingAmount, another.FundingAmount) &&
                object.Equals(this.FundingCurrency, another.FundingCurrency) &&
                object.Equals(this.Interest, another.Interest) &&
                object.Equals(this.InterestVat, another.InterestVat) &&
                object.Equals(this.Link, another.Link) &&
                object.Equals(this.LinkedAccount, another.LinkedAccount) &&
                object.Equals(this.MerchantAdvice, another.MerchantAdvice) &&
                object.Equals(this.MerchantName, another.MerchantName) &&
                object.Equals(this.MerchantUid, another.MerchantUid) &&
                object.Equals(this.Net, another.Net) &&
                object.Equals(this.PartiallyRefundable, another.PartiallyRefundable) &&
                object.Equals(this.Refundable, another.Refundable) &&
                object.Equals(this.RefundedAmount, another.RefundedAmount) &&
                object.Equals(this.ReversedAt, another.ReversedAt) &&
                object.Equals(this.Reversible, another.Reversible) &&
                object.Equals(this.Schedule, another.Schedule) &&
                object.Equals(this.Terminal, another.Terminal) &&
                object.Equals(this.TransactionFees, another.TransactionFees) &&
                object.Equals(this.UnmanagedPayment, another.UnmanagedPayment) &&
                object.Equals(this.Voided, another.Voided) &&
                object.Equals(this.zeroInterestInstallments, another.zeroInterestInstallments) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (Status != default(ChargeStatus)) {
                    hash = hash * 23 + Status.GetHashCode();
                }
                if (Amount != default(long)) {
                    hash = hash * 23 + Amount.GetHashCode();
                }
                if (Currency != default(string)) {
                    hash = hash * 23 + Currency.GetHashCode();
                }
                if (AuthorizationType != default(AuthTypes)) {
                    hash = hash * 23 + AuthorizationType.GetHashCode();
                }
                if (Description != default(string)) {
                    hash = hash * 23 + Description.GetHashCode();
                }
                if (ExpiresAt != default(DateTime)) {
                    hash = hash * 23 + ExpiresAt.GetHashCode();
                }
                if (Metadata != default(IDictionary<string,object>)) {
                    hash = hash * 23 + Metadata.GetHashCode();
                }
                if (Capture != default(bool)) {
                    hash = hash * 23 + Capture.GetHashCode();
                }
                if (Authorized != default(bool)) {
                    hash = hash * 23 + Authorized.GetHashCode();
                }
                if (Reversed != default(bool)) {
                    hash = hash * 23 + Reversed.GetHashCode();
                }
                if (Expired != default(bool)) {
                    hash = hash * 23 + Expired.GetHashCode();
                }
                if (Paid != default(bool)) {
                    hash = hash * 23 + Paid.GetHashCode();
                }
                if (PaidAt != default(DateTime)) {
                    hash = hash * 23 + PaidAt.GetHashCode();
                }
                if (Transaction != default(string)) {
                    hash = hash * 23 + Transaction.GetHashCode();
                }
                if (SourceOfFund != default(SourceOfFunds)) {
                    hash = hash * 23 + SourceOfFund.GetHashCode();
                }
                if (Card != default(Card)) {
                    hash = hash * 23 + Card.GetHashCode();
                }
                if (Source != default(PaymentSource)) {
                    hash = hash * 23 + Source.GetHashCode();
                }
                if (Refunded != default(long)) {
                    hash = hash * 23 + Refunded.GetHashCode();
                }
                if (Refunds != default(ScopedList<Refund>)) {
                    hash = hash * 23 + Refunds.GetHashCode();
                }
                if (FailureCode != default(string)) {
                    hash = hash * 23 + FailureCode.GetHashCode();
                }
                if (FailureMessage != default(string)) {
                    hash = hash * 23 + FailureMessage.GetHashCode();
                }
                if (Customer != default(string)) {
                    hash = hash * 23 + Customer.GetHashCode();
                }
                if (IP != default(string)) {
                    hash = hash * 23 + IP.GetHashCode();
                }
                if (Dispute != default(Dispute)) {
                    hash = hash * 23 + Dispute.GetHashCode();
                }
                if (ReturnURI != default(string)) {
                    hash = hash * 23 + ReturnURI.GetHashCode();
                }
                if (AuthorizeURI != default(string)) {
                    hash = hash * 23 + AuthorizeURI.GetHashCode();
                }
                if (Offsite != default(OffsiteTypes)) {
                    hash = hash * 23 + Offsite.GetHashCode();
                }
                if (InstallmentTerms != default(int)) {
                    hash = hash * 23 + InstallmentTerms.GetHashCode();
                }
                if (PlatformFee != default(PlatformFee)) {
                    hash = hash * 23 + PlatformFee.GetHashCode();
                }
                if (AcquirerReferenceNumber != default(string?)) {
                    hash = hash * 23 + AcquirerReferenceNumber.GetHashCode();
                }
                if (ApprovalCode != default(string)) {
                    hash = hash * 23 + ApprovalCode.GetHashCode();
                }
                if (AuthorizedAmount != default(long)) {
                    hash = hash * 23 + AuthorizedAmount.GetHashCode();
                }
                if (AuthorizedAt != default(DateTime)) {
                    hash = hash * 23 + AuthorizedAt.GetHashCode();
                }
                if (Branch != default(string)) {
                    hash = hash * 23 + Branch.GetHashCode();
                }
                if (CanPerformVoid != default(bool)) {
                    hash = hash * 23 + CanPerformVoid.GetHashCode();
                }
                if (Capturable != default(bool)) {
                    hash = hash * 23 + Capturable.GetHashCode();
                }
                if (CapturedAmount != default(long)) {
                    hash = hash * 23 + CapturedAmount.GetHashCode();
                }
                if (Device != default(string)) {
                    hash = hash * 23 + Device.GetHashCode();
                }
                if (Disputable != default(bool)) {
                    hash = hash * 23 + Disputable.GetHashCode();
                }
                if (ExpiredAt != default(DateTime)) {
                    hash = hash * 23 + ExpiredAt.GetHashCode();
                }
                if (Fee != default(long)) {
                    hash = hash * 23 + Fee.GetHashCode();
                }
                if (FeeVat != default(long)) {
                    hash = hash * 23 + FeeVat.GetHashCode();
                }
                if (FundingAmount != default(long)) {
                    hash = hash * 23 + FundingAmount.GetHashCode();
                }
                if (FundingCurrency != default(string)) {
                    hash = hash * 23 + FundingCurrency.GetHashCode();
                }
                if (Interest != default(long)) {
                    hash = hash * 23 + Interest.GetHashCode();
                }
                if (InterestVat != default(long)) {
                    hash = hash * 23 + InterestVat.GetHashCode();
                }
                if (Link != default(string)) {
                    hash = hash * 23 + Link.GetHashCode();
                }
                if (LinkedAccount != default(LinkedAccount)) {
                    hash = hash * 23 + LinkedAccount.GetHashCode();
                }
                if (MerchantAdvice != default(string)) {
                    hash = hash * 23 + MerchantAdvice.GetHashCode();
                }
                if (MerchantName != default(string)) {
                    hash = hash * 23 + MerchantName.GetHashCode();
                }
                if (MerchantUid != default(string)) {
                    hash = hash * 23 + MerchantUid.GetHashCode();
                }
                if (Net != default(long)) {
                    hash = hash * 23 + Net.GetHashCode();
                }
                if (PartiallyRefundable != default(bool)) {
                    hash = hash * 23 + PartiallyRefundable.GetHashCode();
                }
                if (Refundable != default(bool)) {
                    hash = hash * 23 + Refundable.GetHashCode();
                }
                if (RefundedAmount != default(long)) {
                    hash = hash * 23 + RefundedAmount.GetHashCode();
                }
                if (ReversedAt != default(DateTime)) {
                    hash = hash * 23 + ReversedAt.GetHashCode();
                }
                if (Reversible != default(bool)) {
                    hash = hash * 23 + Reversible.GetHashCode();
                }
                if (Schedule != default(string)) {
                    hash = hash * 23 + Schedule.GetHashCode();
                }
                if (Terminal != default(string)) {
                    hash = hash * 23 + Terminal.GetHashCode();
                }
                if (TransactionFees != default(TransactionFees)) {
                    hash = hash * 23 + TransactionFees.GetHashCode();
                }
                if (UnmanagedPayment != default(UnmanagedPayment)) {
                    hash = hash * 23 + UnmanagedPayment.GetHashCode();
                }
                if (Voided != default(bool)) {
                    hash = hash * 23 + Voided.GetHashCode();
                }
                if (zeroInterestInstallments != default(bool)) {
                    hash = hash * 23 + zeroInterestInstallments.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class LinkedAccount : ModelBase {
        [JsonProperty("registration_uri")]
        public string RegistrationUri { get; set; }
        [JsonProperty("return_uri")]
        public string ReturnUri { get; set; }
        [JsonProperty("type")]
        public string Type { get; set; }
        [JsonProperty("status")]
        public string Status { get; set; }
        [JsonProperty("last_digits")]
        public string? LastDigits { get; set; }
        [JsonProperty("metadata")]
        public IDictionary<string,object> Metadata { get; set; }
        [JsonProperty("failure_code")]
        public string? FailureCode { get; set; }
        [JsonProperty("failure_message")]
        public string? FailureMessage { get; set; }
        [JsonProperty("registered_at")]
        public DateTime RegisteredAt { get; set; }
        [JsonProperty("expires_at")]
        public DateTime ExpiresAt { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as LinkedAccount;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.RegistrationUri, another.RegistrationUri) &&
                object.Equals(this.ReturnUri, another.ReturnUri) &&
                object.Equals(this.Type, another.Type) &&
                object.Equals(this.Status, another.Status) &&
                object.Equals(this.LastDigits, another.LastDigits) &&
                object.Equals(this.Metadata, another.Metadata) &&
                object.Equals(this.FailureCode, another.FailureCode) &&
                object.Equals(this.FailureMessage, another.FailureMessage) &&
                object.Equals(this.RegisteredAt, another.RegisteredAt) &&
                object.Equals(this.ExpiresAt, another.ExpiresAt) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (RegistrationUri != default(string)) {
                    hash = hash * 23 + RegistrationUri.GetHashCode();
                }
                if (ReturnUri != default(string)) {
                    hash = hash * 23 + ReturnUri.GetHashCode();
                }
                if (Type != default(string)) {
                    hash = hash * 23 + Type.GetHashCode();
                }
                if (Status != default(string)) {
                    hash = hash * 23 + Status.GetHashCode();
                }
                if (LastDigits != default(string?)) {
                    hash = hash * 23 + LastDigits.GetHashCode();
                }
                if (Metadata != default(IDictionary<string,object>)) {
                    hash = hash * 23 + Metadata.GetHashCode();
                }
                if (FailureCode != default(string?)) {
                    hash = hash * 23 + FailureCode.GetHashCode();
                }
                if (FailureMessage != default(string?)) {
                    hash = hash * 23 + FailureMessage.GetHashCode();
                }
                if (RegisteredAt != default(DateTime)) {
                    hash = hash * 23 + RegisteredAt.GetHashCode();
                }
                if (ExpiresAt != default(DateTime)) {
                    hash = hash * 23 + ExpiresAt.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class UnmanagedPayment : ModelBase {
        [JsonProperty("authorization_code")]
        public string AuthorizationCode { get; set; }
        [JsonProperty("backend_name")]
        public string BackendName { get; set; }
        [JsonProperty("iin")]
        public string Iin { get; set; }
        [JsonProperty("merchant_reference")]
        public string MerchantReference { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as UnmanagedPayment;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.AuthorizationCode, another.AuthorizationCode) &&
                object.Equals(this.BackendName, another.BackendName) &&
                object.Equals(this.Iin, another.Iin) &&
                object.Equals(this.MerchantReference, another.MerchantReference) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (AuthorizationCode != default(string)) {
                    hash = hash * 23 + AuthorizationCode.GetHashCode();
                }
                if (BackendName != default(string)) {
                    hash = hash * 23 + BackendName.GetHashCode();
                }
                if (Iin != default(string)) {
                    hash = hash * 23 + Iin.GetHashCode();
                }
                if (MerchantReference != default(string)) {
                    hash = hash * 23 + MerchantReference.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class TransactionFees : ModelBase {
        [JsonProperty("fee_flat")]
        public long FeeFlat { get; set; }
        [JsonProperty("fee_rate")]
        public long FeeRate { get; set; }
        [JsonProperty("vat_rate")]
        public long VatRate { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as TransactionFees;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.FeeFlat, another.FeeFlat) &&
                object.Equals(this.FeeRate, another.FeeRate) &&
                object.Equals(this.VatRate, another.VatRate) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (FeeFlat != default(long)) {
                    hash = hash * 23 + FeeFlat.GetHashCode();
                }
                if (FeeRate != default(long)) {
                    hash = hash * 23 + FeeRate.GetHashCode();
                }
                if (VatRate != default(long)) {
                    hash = hash * 23 + VatRate.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class PlatformFee : ModelBase {
        [JsonProperty("fixed")]
        public long? Fixed { get; set; }
        [JsonProperty("amount")]
        public long? Amount { get; set; }
        [JsonProperty("percentage")]
        public string Percentage { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as PlatformFee;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.Fixed, another.Fixed) &&
                object.Equals(this.Amount, another.Amount) &&
                object.Equals(this.Percentage, another.Percentage) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (Fixed != default(long?)) {
                    hash = hash * 23 + Fixed.GetHashCode();
                }
                if (Amount != default(long?)) {
                    hash = hash * 23 + Amount.GetHashCode();
                }
                if (Percentage != default(string)) {
                    hash = hash * 23 + Percentage.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class Customer : ModelBase {
        [JsonProperty("default_card")]
        public string DefaultCard { get; set; }
        [JsonProperty("email")]
        public string Email { get; set; }
        [JsonProperty("description")]
        public string Description { get; set; }
        [JsonProperty("metadata")]
        public IDictionary<string,object> Metadata { get; set; }
        [JsonProperty("cards")]
        public ScopedList<Card> Cards { get; set; }
        [JsonProperty("deleted")]
        public bool Deleted { get; set; }
        [JsonProperty("linkedaccounts")]
        public ScopedList<Account> LinkedAccounts { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as Customer;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.DefaultCard, another.DefaultCard) &&
                object.Equals(this.Email, another.Email) &&
                object.Equals(this.Description, another.Description) &&
                object.Equals(this.Metadata, another.Metadata) &&
                object.Equals(this.Cards, another.Cards) &&
                object.Equals(this.Deleted, another.Deleted) &&
                object.Equals(this.LinkedAccounts, another.LinkedAccounts) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (DefaultCard != default(string)) {
                    hash = hash * 23 + DefaultCard.GetHashCode();
                }
                if (Email != default(string)) {
                    hash = hash * 23 + Email.GetHashCode();
                }
                if (Description != default(string)) {
                    hash = hash * 23 + Description.GetHashCode();
                }
                if (Metadata != default(IDictionary<string,object>)) {
                    hash = hash * 23 + Metadata.GetHashCode();
                }
                if (Cards != default(ScopedList<Card>)) {
                    hash = hash * 23 + Cards.GetHashCode();
                }
                if (Deleted != default(bool)) {
                    hash = hash * 23 + Deleted.GetHashCode();
                }
                if (LinkedAccounts != default(ScopedList<Account>)) {
                    hash = hash * 23 + LinkedAccounts.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class Dispute : ModelBase {
        [JsonProperty("amount")]
        public long Amount { get; set; }
        [JsonProperty("currency")]
        public string Currency { get; set; }
        [JsonProperty("status")]
        public DisputeStatus Status { get; set; }
        [JsonProperty("message")]
        public string? Message { get; set; }
        [JsonProperty("charge")]
        public string Charge { get; set; }
        [JsonProperty("funding_amount")]
        public long FundingAmount { get; set; }
        [JsonProperty("funding_currency")]
        public string FundingCurrency { get; set; }
        [JsonProperty("metadata")]
        public IDictionary<string,object> Metadata { get; set; }
        [JsonProperty("documents")]
        public ScopedList<Document> Documents { get; set; }
        [JsonProperty("transactions")]
        public List<string> Transactions { get; set; }
        [JsonProperty("admin_message")]
        public string? AdminMessage { get; set; }
        [JsonProperty("reason_code")]
        public ReasonCode ReasonCode { get; set; }
        [JsonProperty("reasonmessage")]
        public string ReasonMessage { get; set; }
        [JsonProperty("closed_at")]
        public DateTime? ClosedAt { get; set; }
        [JsonProperty("merchant_name")]
        public string MerchantName { get; set; }
        [JsonProperty("merchant_uid")]
        public string MerchantUid { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as Dispute;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.Amount, another.Amount) &&
                object.Equals(this.Currency, another.Currency) &&
                object.Equals(this.Status, another.Status) &&
                object.Equals(this.Message, another.Message) &&
                object.Equals(this.Charge, another.Charge) &&
                object.Equals(this.FundingAmount, another.FundingAmount) &&
                object.Equals(this.FundingCurrency, another.FundingCurrency) &&
                object.Equals(this.Metadata, another.Metadata) &&
                object.Equals(this.Documents, another.Documents) &&
                object.Equals(this.Transactions, another.Transactions) &&
                object.Equals(this.AdminMessage, another.AdminMessage) &&
                object.Equals(this.ReasonCode, another.ReasonCode) &&
                object.Equals(this.ReasonMessage, another.ReasonMessage) &&
                object.Equals(this.ClosedAt, another.ClosedAt) &&
                object.Equals(this.MerchantName, another.MerchantName) &&
                object.Equals(this.MerchantUid, another.MerchantUid) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (Amount != default(long)) {
                    hash = hash * 23 + Amount.GetHashCode();
                }
                if (Currency != default(string)) {
                    hash = hash * 23 + Currency.GetHashCode();
                }
                if (Status != default(DisputeStatus)) {
                    hash = hash * 23 + Status.GetHashCode();
                }
                if (Message != default(string?)) {
                    hash = hash * 23 + Message.GetHashCode();
                }
                if (Charge != default(string)) {
                    hash = hash * 23 + Charge.GetHashCode();
                }
                if (FundingAmount != default(long)) {
                    hash = hash * 23 + FundingAmount.GetHashCode();
                }
                if (FundingCurrency != default(string)) {
                    hash = hash * 23 + FundingCurrency.GetHashCode();
                }
                if (Metadata != default(IDictionary<string,object>)) {
                    hash = hash * 23 + Metadata.GetHashCode();
                }
                if (Documents != default(ScopedList<Document>)) {
                    hash = hash * 23 + Documents.GetHashCode();
                }
                if (Transactions != default(List<string>)) {
                    hash = hash * 23 + Transactions.GetHashCode();
                }
                if (AdminMessage != default(string?)) {
                    hash = hash * 23 + AdminMessage.GetHashCode();
                }
                if (ReasonCode != default(ReasonCode)) {
                    hash = hash * 23 + ReasonCode.GetHashCode();
                }
                if (ReasonMessage != default(string)) {
                    hash = hash * 23 + ReasonMessage.GetHashCode();
                }
                if (ClosedAt != default(DateTime?)) {
                    hash = hash * 23 + ClosedAt.GetHashCode();
                }
                if (MerchantName != default(string)) {
                    hash = hash * 23 + MerchantName.GetHashCode();
                }
                if (MerchantUid != default(string)) {
                    hash = hash * 23 + MerchantUid.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class Document : ModelBase {
        [JsonProperty("download_uri")]
        public string DownloadURI { get; set; }
        [JsonProperty("filename")]
        public string Filename { get; set; }
        [JsonProperty("deleted")]
        public bool Deleted { get; set; }
        [JsonProperty("kind")]
        public string Kind { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as Document;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.DownloadURI, another.DownloadURI) &&
                object.Equals(this.Filename, another.Filename) &&
                object.Equals(this.Deleted, another.Deleted) &&
                object.Equals(this.Kind, another.Kind) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (DownloadURI != default(string)) {
                    hash = hash * 23 + DownloadURI.GetHashCode();
                }
                if (Filename != default(string)) {
                    hash = hash * 23 + Filename.GetHashCode();
                }
                if (Deleted != default(bool)) {
                    hash = hash * 23 + Deleted.GetHashCode();
                }
                if (Kind != default(string)) {
                    hash = hash * 23 + Kind.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class Event : ModelBase {
        [JsonProperty("key")]
        public string Key { get; set; }
        [JsonProperty("data")]
        public JRaw RawDataJson { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as Event;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.Key, another.Key) &&
                object.Equals(this.RawDataJson, another.RawDataJson) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (Key != default(string)) {
                    hash = hash * 23 + Key.GetHashCode();
                }
                if (RawDataJson != default(JRaw)) {
                    hash = hash * 23 + RawDataJson.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class Forex : ModelBase {
        [JsonProperty("rate")]
        public float Rate { get; set; }
        [JsonProperty("base")]
        public string Base { get; set; }
        [JsonProperty("quote")]
        public string Quote { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as Forex;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.Rate, another.Rate) &&
                object.Equals(this.Base, another.Base) &&
                object.Equals(this.Quote, another.Quote) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (Rate != default(float)) {
                    hash = hash * 23 + Rate.GetHashCode();
                }
                if (Base != default(string)) {
                    hash = hash * 23 + Base.GetHashCode();
                }
                if (Quote != default(string)) {
                    hash = hash * 23 + Quote.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class Link : ModelBase {
        [JsonProperty("amount")]
        public long Amount { get; set; }
        [JsonProperty("currency")]
        public string Currency { get; set; }
        [JsonProperty("used")]
        public bool Used { get; set; }
        [JsonProperty("multiple")]
        public bool Multiple { get; set; }
        [JsonProperty("title")]
        public string Title { get; set; }
        [JsonProperty("description")]
        public string Description { get; set; }
        [JsonProperty("charges")]
        public ScopedList<Charge> Charges { get; set; }
        [JsonProperty("payment_uri")]
        public string PaymentURI { get; set; }
        [JsonProperty("deleted")]
        public bool Deleted { get; set; }
        [JsonProperty("used_at")]
        public DateTime UsedAt { get; set; }
        [JsonProperty("deleted_at")]
        public DateTime DeletedAt { get; set; }
        [JsonProperty("merchant_name")]
        public string MerchantName { get; set; }
        [JsonProperty("merchant_uid")]
        public string MerchantUid { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as Link;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.Amount, another.Amount) &&
                object.Equals(this.Currency, another.Currency) &&
                object.Equals(this.Used, another.Used) &&
                object.Equals(this.Multiple, another.Multiple) &&
                object.Equals(this.Title, another.Title) &&
                object.Equals(this.Description, another.Description) &&
                object.Equals(this.Charges, another.Charges) &&
                object.Equals(this.PaymentURI, another.PaymentURI) &&
                object.Equals(this.Deleted, another.Deleted) &&
                object.Equals(this.UsedAt, another.UsedAt) &&
                object.Equals(this.DeletedAt, another.DeletedAt) &&
                object.Equals(this.MerchantName, another.MerchantName) &&
                object.Equals(this.MerchantUid, another.MerchantUid) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (Amount != default(long)) {
                    hash = hash * 23 + Amount.GetHashCode();
                }
                if (Currency != default(string)) {
                    hash = hash * 23 + Currency.GetHashCode();
                }
                if (Used != default(bool)) {
                    hash = hash * 23 + Used.GetHashCode();
                }
                if (Multiple != default(bool)) {
                    hash = hash * 23 + Multiple.GetHashCode();
                }
                if (Title != default(string)) {
                    hash = hash * 23 + Title.GetHashCode();
                }
                if (Description != default(string)) {
                    hash = hash * 23 + Description.GetHashCode();
                }
                if (Charges != default(ScopedList<Charge>)) {
                    hash = hash * 23 + Charges.GetHashCode();
                }
                if (PaymentURI != default(string)) {
                    hash = hash * 23 + PaymentURI.GetHashCode();
                }
                if (Deleted != default(bool)) {
                    hash = hash * 23 + Deleted.GetHashCode();
                }
                if (UsedAt != default(DateTime)) {
                    hash = hash * 23 + UsedAt.GetHashCode();
                }
                if (DeletedAt != default(DateTime)) {
                    hash = hash * 23 + DeletedAt.GetHashCode();
                }
                if (MerchantName != default(string)) {
                    hash = hash * 23 + MerchantName.GetHashCode();
                }
                if (MerchantUid != default(string)) {
                    hash = hash * 23 + MerchantUid.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class Occurrence : ModelBase {
        [JsonProperty("schedule")]
        public string Schedule { get; set; }
        [JsonProperty("schedule_date")]
        public DateTime ScheduleDate { get; set; }
        [JsonProperty("retry_date")]
        public DateTime RetryDate { get; set; }
        [JsonProperty("processed_at")]
        public DateTime ProcessedAt { get; set; }
        [JsonProperty("status")]
        public OccurrenceStatus Status { get; set; }
        [JsonProperty("message")]
        public string? Message { get; set; }
        [JsonProperty("result")]
        public string? Result { get; set; }
        [JsonProperty("scheduled_on")]
        public DateTime ScheduledOn { get; set; }
        [JsonProperty("retry_on")]
        public DateTime RetryOn { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as Occurrence;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.Schedule, another.Schedule) &&
                object.Equals(this.ScheduleDate, another.ScheduleDate) &&
                object.Equals(this.RetryDate, another.RetryDate) &&
                object.Equals(this.ProcessedAt, another.ProcessedAt) &&
                object.Equals(this.Status, another.Status) &&
                object.Equals(this.Message, another.Message) &&
                object.Equals(this.Result, another.Result) &&
                object.Equals(this.ScheduledOn, another.ScheduledOn) &&
                object.Equals(this.RetryOn, another.RetryOn) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (Schedule != default(string)) {
                    hash = hash * 23 + Schedule.GetHashCode();
                }
                if (ScheduleDate != default(DateTime)) {
                    hash = hash * 23 + ScheduleDate.GetHashCode();
                }
                if (RetryDate != default(DateTime)) {
                    hash = hash * 23 + RetryDate.GetHashCode();
                }
                if (ProcessedAt != default(DateTime)) {
                    hash = hash * 23 + ProcessedAt.GetHashCode();
                }
                if (Status != default(OccurrenceStatus)) {
                    hash = hash * 23 + Status.GetHashCode();
                }
                if (Message != default(string?)) {
                    hash = hash * 23 + Message.GetHashCode();
                }
                if (Result != default(string?)) {
                    hash = hash * 23 + Result.GetHashCode();
                }
                if (ScheduledOn != default(DateTime)) {
                    hash = hash * 23 + ScheduledOn.GetHashCode();
                }
                if (RetryOn != default(DateTime)) {
                    hash = hash * 23 + RetryOn.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class PaymentMethod : ModelBase {
        [JsonProperty("currencies")]
        public List<string> Currencies { get; set; }
        [JsonProperty("card_brands")]
        public List<string> CardBrands { get; set; }
        [JsonProperty("installment_terms")]
        public List<int> InstallmentTerms { get; set; }
        [JsonProperty("banks")]
        public List<Bank> Banks { get; set; }
        [JsonProperty("name")]
        public string Name { get; set; }
        [JsonProperty("provider")]
        public string Provider { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as PaymentMethod;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.Currencies, another.Currencies) &&
                object.Equals(this.CardBrands, another.CardBrands) &&
                object.Equals(this.InstallmentTerms, another.InstallmentTerms) &&
                object.Equals(this.Banks, another.Banks) &&
                object.Equals(this.Name, another.Name) &&
                object.Equals(this.Provider, another.Provider) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (Currencies != default(List<string>)) {
                    hash = hash * 23 + Currencies.GetHashCode();
                }
                if (CardBrands != default(List<string>)) {
                    hash = hash * 23 + CardBrands.GetHashCode();
                }
                if (InstallmentTerms != default(List<int>)) {
                    hash = hash * 23 + InstallmentTerms.GetHashCode();
                }
                if (Banks != default(List<Bank>)) {
                    hash = hash * 23 + Banks.GetHashCode();
                }
                if (Name != default(string)) {
                    hash = hash * 23 + Name.GetHashCode();
                }
                if (Provider != default(string)) {
                    hash = hash * 23 + Provider.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class PaymentReference : ModelBase {
        [JsonProperty("omisetaxid")]
        public string OmiseTaxId { get; set; }
        [JsonProperty("reference_number_1")]
        public string ReferenceNumber1 { get; set; }
        [JsonProperty("reference_number_2")]
        public string ReferenceNumber2 { get; set; }
        [JsonProperty("barcode")]
        public string Barcode { get; set; }
        [JsonProperty("expires_at")]
        public DateTime ExpiresAt { get; set; }
        [JsonProperty("device_id")]
        public string DeviceId { get; set; }
        [JsonProperty("customer_amount")]
        public long CustomerAmount { get; set; }
        [JsonProperty("customer_currency")]
        public string CustomerCurrency { get; set; }
        [JsonProperty("customer_exchange_rate")]
        public long CustomerExchangeRate { get; set; }
        [JsonProperty("payment_code")]
        public string PaymentCode { get; set; }
        [JsonProperty("vacode")]
        public string VaCode { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as PaymentReference;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.OmiseTaxId, another.OmiseTaxId) &&
                object.Equals(this.ReferenceNumber1, another.ReferenceNumber1) &&
                object.Equals(this.ReferenceNumber2, another.ReferenceNumber2) &&
                object.Equals(this.Barcode, another.Barcode) &&
                object.Equals(this.ExpiresAt, another.ExpiresAt) &&
                object.Equals(this.DeviceId, another.DeviceId) &&
                object.Equals(this.CustomerAmount, another.CustomerAmount) &&
                object.Equals(this.CustomerCurrency, another.CustomerCurrency) &&
                object.Equals(this.CustomerExchangeRate, another.CustomerExchangeRate) &&
                object.Equals(this.PaymentCode, another.PaymentCode) &&
                object.Equals(this.VaCode, another.VaCode) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (OmiseTaxId != default(string)) {
                    hash = hash * 23 + OmiseTaxId.GetHashCode();
                }
                if (ReferenceNumber1 != default(string)) {
                    hash = hash * 23 + ReferenceNumber1.GetHashCode();
                }
                if (ReferenceNumber2 != default(string)) {
                    hash = hash * 23 + ReferenceNumber2.GetHashCode();
                }
                if (Barcode != default(string)) {
                    hash = hash * 23 + Barcode.GetHashCode();
                }
                if (ExpiresAt != default(DateTime)) {
                    hash = hash * 23 + ExpiresAt.GetHashCode();
                }
                if (DeviceId != default(string)) {
                    hash = hash * 23 + DeviceId.GetHashCode();
                }
                if (CustomerAmount != default(long)) {
                    hash = hash * 23 + CustomerAmount.GetHashCode();
                }
                if (CustomerCurrency != default(string)) {
                    hash = hash * 23 + CustomerCurrency.GetHashCode();
                }
                if (CustomerExchangeRate != default(long)) {
                    hash = hash * 23 + CustomerExchangeRate.GetHashCode();
                }
                if (PaymentCode != default(string)) {
                    hash = hash * 23 + PaymentCode.GetHashCode();
                }
                if (VaCode != default(string)) {
                    hash = hash * 23 + VaCode.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class ProviderReference : ModelBase {
        [JsonProperty("reference_number_1")]
        public string ReferenceNumber1 { get; set; }
        [JsonProperty("reference_number_2")]
        public string ReferenceNumber2 { get; set; }
        [JsonProperty("buyer_name")]
        public string BuyerName { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as ProviderReference;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.ReferenceNumber1, another.ReferenceNumber1) &&
                object.Equals(this.ReferenceNumber2, another.ReferenceNumber2) &&
                object.Equals(this.BuyerName, another.BuyerName) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (ReferenceNumber1 != default(string)) {
                    hash = hash * 23 + ReferenceNumber1.GetHashCode();
                }
                if (ReferenceNumber2 != default(string)) {
                    hash = hash * 23 + ReferenceNumber2.GetHashCode();
                }
                if (BuyerName != default(string)) {
                    hash = hash * 23 + BuyerName.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class PaymentSource : ModelBase {
        [JsonProperty("type")]
        public OffsiteTypes Type { get; set; }
        [JsonProperty("flow")]
        public FlowTypes Flow { get; set; }
        [JsonProperty("platform_type")]
        public PlatformTypes PlatformType { get; set; }
        [JsonProperty("amount")]
        public long Amount { get; set; }
        [JsonProperty("currency")]
        public string Currency { get; set; }
        [JsonProperty("references")]
        public PaymentReference References { get; set; }
        [JsonProperty("barcode")]
        public string Barcode { get; set; }
        [JsonProperty("bank")]
        public string Bank { get; set; }
        [JsonProperty("email")]
        public string Email { get; set; }
        [JsonProperty("phone_number")]
        public string PhoneNumber { get; set; }
        [JsonProperty("mobile_number")]
        public string MobileNumber { get; set; }
        [JsonProperty("scannable_code")]
        public Barcode ScannableCode { get; set; }
        [JsonProperty("store_id")]
        public string StoreId { get; set; }
        [JsonProperty("store_name")]
        public string StoreName { get; set; }
        [JsonProperty("terminal_id")]
        public string TerminalId { get; set; }
        [JsonProperty("ip")]
        public string Ip { get; set; }
        [JsonProperty("installment_term")]
        public long InstallmentTerm { get; set; }
        [JsonProperty("absorption_type")]
        public AbsorptionType AbsorptionType { get; set; }
        [JsonProperty("name")]
        public string Name { get; set; }
        [JsonProperty("billing")]
        public Billing Billing { get; set; }
        [JsonProperty("shipping")]
        public Shipping Shipping { get; set; }
        [JsonProperty("items")]
        public ScopedList<Item> Items { get; set; }
        [JsonProperty("provider_references")]
        public ProviderReference ProviderReferences { get; set; }
        [JsonProperty("zero_interest_installments")]
        public bool ZeroInterestInstallments { get; set; }
        [JsonProperty("charge_status")]
        public ChargeStatus ChargeStatus { get; set; }
        [JsonProperty("receipt_amount")]
        public long ReceiptAmount { get; set; }
        [JsonProperty("discounts")]
        public ScopedList<Item> Discounts { get; set; }
        [JsonProperty("promotion_code")]
        public string PromotionCode { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as PaymentSource;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.Type, another.Type) &&
                object.Equals(this.Flow, another.Flow) &&
                object.Equals(this.PlatformType, another.PlatformType) &&
                object.Equals(this.Amount, another.Amount) &&
                object.Equals(this.Currency, another.Currency) &&
                object.Equals(this.References, another.References) &&
                object.Equals(this.Barcode, another.Barcode) &&
                object.Equals(this.Bank, another.Bank) &&
                object.Equals(this.Email, another.Email) &&
                object.Equals(this.PhoneNumber, another.PhoneNumber) &&
                object.Equals(this.MobileNumber, another.MobileNumber) &&
                object.Equals(this.ScannableCode, another.ScannableCode) &&
                object.Equals(this.StoreId, another.StoreId) &&
                object.Equals(this.StoreName, another.StoreName) &&
                object.Equals(this.TerminalId, another.TerminalId) &&
                object.Equals(this.Ip, another.Ip) &&
                object.Equals(this.InstallmentTerm, another.InstallmentTerm) &&
                object.Equals(this.AbsorptionType, another.AbsorptionType) &&
                object.Equals(this.Name, another.Name) &&
                object.Equals(this.Billing, another.Billing) &&
                object.Equals(this.Shipping, another.Shipping) &&
                object.Equals(this.Items, another.Items) &&
                object.Equals(this.ProviderReferences, another.ProviderReferences) &&
                object.Equals(this.ZeroInterestInstallments, another.ZeroInterestInstallments) &&
                object.Equals(this.ChargeStatus, another.ChargeStatus) &&
                object.Equals(this.ReceiptAmount, another.ReceiptAmount) &&
                object.Equals(this.Discounts, another.Discounts) &&
                object.Equals(this.PromotionCode, another.PromotionCode) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (Type != default(OffsiteTypes)) {
                    hash = hash * 23 + Type.GetHashCode();
                }
                if (Flow != default(FlowTypes)) {
                    hash = hash * 23 + Flow.GetHashCode();
                }
                if (PlatformType != default(PlatformTypes)) {
                    hash = hash * 23 + PlatformType.GetHashCode();
                }
                if (Amount != default(long)) {
                    hash = hash * 23 + Amount.GetHashCode();
                }
                if (Currency != default(string)) {
                    hash = hash * 23 + Currency.GetHashCode();
                }
                if (References != default(PaymentReference)) {
                    hash = hash * 23 + References.GetHashCode();
                }
                if (Barcode != default(string)) {
                    hash = hash * 23 + Barcode.GetHashCode();
                }
                if (Bank != default(string)) {
                    hash = hash * 23 + Bank.GetHashCode();
                }
                if (Email != default(string)) {
                    hash = hash * 23 + Email.GetHashCode();
                }
                if (PhoneNumber != default(string)) {
                    hash = hash * 23 + PhoneNumber.GetHashCode();
                }
                if (MobileNumber != default(string)) {
                    hash = hash * 23 + MobileNumber.GetHashCode();
                }
                if (ScannableCode != default(Barcode)) {
                    hash = hash * 23 + ScannableCode.GetHashCode();
                }
                if (StoreId != default(string)) {
                    hash = hash * 23 + StoreId.GetHashCode();
                }
                if (StoreName != default(string)) {
                    hash = hash * 23 + StoreName.GetHashCode();
                }
                if (TerminalId != default(string)) {
                    hash = hash * 23 + TerminalId.GetHashCode();
                }
                if (Ip != default(string)) {
                    hash = hash * 23 + Ip.GetHashCode();
                }
                if (InstallmentTerm != default(long)) {
                    hash = hash * 23 + InstallmentTerm.GetHashCode();
                }
                if (AbsorptionType != default(AbsorptionType)) {
                    hash = hash * 23 + AbsorptionType.GetHashCode();
                }
                if (Name != default(string)) {
                    hash = hash * 23 + Name.GetHashCode();
                }
                if (Billing != default(Billing)) {
                    hash = hash * 23 + Billing.GetHashCode();
                }
                if (Shipping != default(Shipping)) {
                    hash = hash * 23 + Shipping.GetHashCode();
                }
                if (Items != default(ScopedList<Item>)) {
                    hash = hash * 23 + Items.GetHashCode();
                }
                if (ProviderReferences != default(ProviderReference)) {
                    hash = hash * 23 + ProviderReferences.GetHashCode();
                }
                if (ZeroInterestInstallments != default(bool)) {
                    hash = hash * 23 + ZeroInterestInstallments.GetHashCode();
                }
                if (ChargeStatus != default(ChargeStatus)) {
                    hash = hash * 23 + ChargeStatus.GetHashCode();
                }
                if (ReceiptAmount != default(long)) {
                    hash = hash * 23 + ReceiptAmount.GetHashCode();
                }
                if (Discounts != default(ScopedList<Item>)) {
                    hash = hash * 23 + Discounts.GetHashCode();
                }
                if (PromotionCode != default(string)) {
                    hash = hash * 23 + PromotionCode.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class Billing : ModelBase {
        [JsonProperty("city")]
        public string City { get; set; }
        [JsonProperty("country")]
        public string Country { get; set; }
        [JsonProperty("postal_code")]
        public string PostalCode { get; set; }
        [JsonProperty("state")]
        public string State { get; set; }
        [JsonProperty("street1")]
        public string Street1 { get; set; }
        [JsonProperty("street2")]
        public string Street2 { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as Billing;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.City, another.City) &&
                object.Equals(this.Country, another.Country) &&
                object.Equals(this.PostalCode, another.PostalCode) &&
                object.Equals(this.State, another.State) &&
                object.Equals(this.Street1, another.Street1) &&
                object.Equals(this.Street2, another.Street2) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (City != default(string)) {
                    hash = hash * 23 + City.GetHashCode();
                }
                if (Country != default(string)) {
                    hash = hash * 23 + Country.GetHashCode();
                }
                if (PostalCode != default(string)) {
                    hash = hash * 23 + PostalCode.GetHashCode();
                }
                if (State != default(string)) {
                    hash = hash * 23 + State.GetHashCode();
                }
                if (Street1 != default(string)) {
                    hash = hash * 23 + Street1.GetHashCode();
                }
                if (Street2 != default(string)) {
                    hash = hash * 23 + Street2.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class Shipping : ModelBase {
        [JsonProperty("city")]
        public string City { get; set; }
        [JsonProperty("country")]
        public string Country { get; set; }
        [JsonProperty("postal_code")]
        public string PostalCode { get; set; }
        [JsonProperty("state")]
        public string State { get; set; }
        [JsonProperty("street1")]
        public string Street1 { get; set; }
        [JsonProperty("street2")]
        public string Street2 { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as Shipping;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.City, another.City) &&
                object.Equals(this.Country, another.Country) &&
                object.Equals(this.PostalCode, another.PostalCode) &&
                object.Equals(this.State, another.State) &&
                object.Equals(this.Street1, another.Street1) &&
                object.Equals(this.Street2, another.Street2) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (City != default(string)) {
                    hash = hash * 23 + City.GetHashCode();
                }
                if (Country != default(string)) {
                    hash = hash * 23 + Country.GetHashCode();
                }
                if (PostalCode != default(string)) {
                    hash = hash * 23 + PostalCode.GetHashCode();
                }
                if (State != default(string)) {
                    hash = hash * 23 + State.GetHashCode();
                }
                if (Street1 != default(string)) {
                    hash = hash * 23 + Street1.GetHashCode();
                }
                if (Street2 != default(string)) {
                    hash = hash * 23 + Street2.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class Item : ModelBase {
        [JsonProperty("amount")]
        public long Amount { get; set; }
        [JsonProperty("sku")]
        public string Sku { get; set; }
        [JsonProperty("name")]
        public string Name { get; set; }
        [JsonProperty("quantity")]
        public long Quantity { get; set; }
        [JsonProperty("category")]
        public string Category { get; set; }
        [JsonProperty("brand")]
        public string Brand { get; set; }
        [JsonProperty("item_uri")]
        public string ItemUri { get; set; }
        [JsonProperty("image_uri")]
        public string ImageUri { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as Item;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.Amount, another.Amount) &&
                object.Equals(this.Sku, another.Sku) &&
                object.Equals(this.Name, another.Name) &&
                object.Equals(this.Quantity, another.Quantity) &&
                object.Equals(this.Category, another.Category) &&
                object.Equals(this.Brand, another.Brand) &&
                object.Equals(this.ItemUri, another.ItemUri) &&
                object.Equals(this.ImageUri, another.ImageUri) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (Amount != default(long)) {
                    hash = hash * 23 + Amount.GetHashCode();
                }
                if (Sku != default(string)) {
                    hash = hash * 23 + Sku.GetHashCode();
                }
                if (Name != default(string)) {
                    hash = hash * 23 + Name.GetHashCode();
                }
                if (Quantity != default(long)) {
                    hash = hash * 23 + Quantity.GetHashCode();
                }
                if (Category != default(string)) {
                    hash = hash * 23 + Category.GetHashCode();
                }
                if (Brand != default(string)) {
                    hash = hash * 23 + Brand.GetHashCode();
                }
                if (ItemUri != default(string)) {
                    hash = hash * 23 + ItemUri.GetHashCode();
                }
                if (ImageUri != default(string)) {
                    hash = hash * 23 + ImageUri.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class Receipt : ModelBase {
        [JsonProperty("number")]
        public string Number { get; set; }
        [JsonProperty("customer_name")]
        public string CustomerName { get; set; }
        [JsonProperty("customer_address")]
        public string CustomerAddress { get; set; }
        [JsonProperty("customer_tax_id")]
        public string CustomerTaxId { get; set; }
        [JsonProperty("customer_email")]
        public string CustomerEmail { get; set; }
        [JsonProperty("customer_statement_name")]
        public string CustomerStatementName { get; set; }
        [JsonProperty("company_name")]
        public string CompanyName { get; set; }
        [JsonProperty("company_address")]
        public string CompanyAddress { get; set; }
        [JsonProperty("company_tax_id")]
        public string CompanyTaxId { get; set; }
        [JsonProperty("charge_fee")]
        public long ChargeFee { get; set; }
        [JsonProperty("voided_fee")]
        public long VoidedFee { get; set; }
        [JsonProperty("transfer_fee")]
        public long TransferFee { get; set; }
        [JsonProperty("subtotal")]
        public long Subtotal { get; set; }
        [JsonProperty("vat")]
        public long Vat { get; set; }
        [JsonProperty("wht")]
        public long Wht { get; set; }
        [JsonProperty("total")]
        public long Total { get; set; }
        [JsonProperty("credit_note")]
        public bool CreditNote { get; set; }
        [JsonProperty("currency")]
        public string Currency { get; set; }
        [JsonProperty("transaction_fee")]
        public long TransactionFee { get; set; }
        [JsonProperty("issued_on")]
        public DateTime IssuedOn { get; set; }
        [JsonProperty("adjustment_transaction")]
        public Transaction AdjustmentTransaction { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as Receipt;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.Number, another.Number) &&
                object.Equals(this.CustomerName, another.CustomerName) &&
                object.Equals(this.CustomerAddress, another.CustomerAddress) &&
                object.Equals(this.CustomerTaxId, another.CustomerTaxId) &&
                object.Equals(this.CustomerEmail, another.CustomerEmail) &&
                object.Equals(this.CustomerStatementName, another.CustomerStatementName) &&
                object.Equals(this.CompanyName, another.CompanyName) &&
                object.Equals(this.CompanyAddress, another.CompanyAddress) &&
                object.Equals(this.CompanyTaxId, another.CompanyTaxId) &&
                object.Equals(this.ChargeFee, another.ChargeFee) &&
                object.Equals(this.VoidedFee, another.VoidedFee) &&
                object.Equals(this.TransferFee, another.TransferFee) &&
                object.Equals(this.Subtotal, another.Subtotal) &&
                object.Equals(this.Vat, another.Vat) &&
                object.Equals(this.Wht, another.Wht) &&
                object.Equals(this.Total, another.Total) &&
                object.Equals(this.CreditNote, another.CreditNote) &&
                object.Equals(this.Currency, another.Currency) &&
                object.Equals(this.TransactionFee, another.TransactionFee) &&
                object.Equals(this.IssuedOn, another.IssuedOn) &&
                object.Equals(this.AdjustmentTransaction, another.AdjustmentTransaction) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (Number != default(string)) {
                    hash = hash * 23 + Number.GetHashCode();
                }
                if (CustomerName != default(string)) {
                    hash = hash * 23 + CustomerName.GetHashCode();
                }
                if (CustomerAddress != default(string)) {
                    hash = hash * 23 + CustomerAddress.GetHashCode();
                }
                if (CustomerTaxId != default(string)) {
                    hash = hash * 23 + CustomerTaxId.GetHashCode();
                }
                if (CustomerEmail != default(string)) {
                    hash = hash * 23 + CustomerEmail.GetHashCode();
                }
                if (CustomerStatementName != default(string)) {
                    hash = hash * 23 + CustomerStatementName.GetHashCode();
                }
                if (CompanyName != default(string)) {
                    hash = hash * 23 + CompanyName.GetHashCode();
                }
                if (CompanyAddress != default(string)) {
                    hash = hash * 23 + CompanyAddress.GetHashCode();
                }
                if (CompanyTaxId != default(string)) {
                    hash = hash * 23 + CompanyTaxId.GetHashCode();
                }
                if (ChargeFee != default(long)) {
                    hash = hash * 23 + ChargeFee.GetHashCode();
                }
                if (VoidedFee != default(long)) {
                    hash = hash * 23 + VoidedFee.GetHashCode();
                }
                if (TransferFee != default(long)) {
                    hash = hash * 23 + TransferFee.GetHashCode();
                }
                if (Subtotal != default(long)) {
                    hash = hash * 23 + Subtotal.GetHashCode();
                }
                if (Vat != default(long)) {
                    hash = hash * 23 + Vat.GetHashCode();
                }
                if (Wht != default(long)) {
                    hash = hash * 23 + Wht.GetHashCode();
                }
                if (Total != default(long)) {
                    hash = hash * 23 + Total.GetHashCode();
                }
                if (CreditNote != default(bool)) {
                    hash = hash * 23 + CreditNote.GetHashCode();
                }
                if (Currency != default(string)) {
                    hash = hash * 23 + Currency.GetHashCode();
                }
                if (TransactionFee != default(long)) {
                    hash = hash * 23 + TransactionFee.GetHashCode();
                }
                if (IssuedOn != default(DateTime)) {
                    hash = hash * 23 + IssuedOn.GetHashCode();
                }
                if (AdjustmentTransaction != default(Transaction)) {
                    hash = hash * 23 + AdjustmentTransaction.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class Recipient : ModelBase {
        [JsonProperty("verified")]
        public bool Verified { get; set; }
        [JsonProperty("active")]
        public bool Active { get; set; }
        [JsonProperty("name")]
        public string Name { get; set; }
        [JsonProperty("email")]
        public string Email { get; set; }
        [JsonProperty("description")]
        public string? Description { get; set; }
        [JsonProperty("type")]
        public RecipientType Type { get; set; }
        [JsonProperty("taxid")]
        public string TaxID { get; set; }
        [JsonProperty("bank_account")]
        public BankAccount BankAccount { get; set; }
        [JsonProperty("failure_code")]
        public string? FailureCode { get; set; }
        [JsonProperty("deleted")]
        public bool Deleted { get; set; }
        [JsonProperty("default")]
        public bool Default { get; set; }
        [JsonProperty("tax_id")]
        public string? TaxId { get; set; }
        [JsonProperty("schedule")]
        public string Schedule { get; set; }
        [JsonProperty("metadata")]
        public IDictionary<string,object> Metadata { get; set; }
        [JsonProperty("verified_at")]
        public DateTime VerifiedAt { get; set; }
        [JsonProperty("activated_at")]
        public DateTime ActivatedAt { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as Recipient;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.Verified, another.Verified) &&
                object.Equals(this.Active, another.Active) &&
                object.Equals(this.Name, another.Name) &&
                object.Equals(this.Email, another.Email) &&
                object.Equals(this.Description, another.Description) &&
                object.Equals(this.Type, another.Type) &&
                object.Equals(this.TaxID, another.TaxID) &&
                object.Equals(this.BankAccount, another.BankAccount) &&
                object.Equals(this.FailureCode, another.FailureCode) &&
                object.Equals(this.Deleted, another.Deleted) &&
                object.Equals(this.Default, another.Default) &&
                object.Equals(this.TaxId, another.TaxId) &&
                object.Equals(this.Schedule, another.Schedule) &&
                object.Equals(this.Metadata, another.Metadata) &&
                object.Equals(this.VerifiedAt, another.VerifiedAt) &&
                object.Equals(this.ActivatedAt, another.ActivatedAt) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (Verified != default(bool)) {
                    hash = hash * 23 + Verified.GetHashCode();
                }
                if (Active != default(bool)) {
                    hash = hash * 23 + Active.GetHashCode();
                }
                if (Name != default(string)) {
                    hash = hash * 23 + Name.GetHashCode();
                }
                if (Email != default(string)) {
                    hash = hash * 23 + Email.GetHashCode();
                }
                if (Description != default(string?)) {
                    hash = hash * 23 + Description.GetHashCode();
                }
                if (Type != default(RecipientType)) {
                    hash = hash * 23 + Type.GetHashCode();
                }
                if (TaxID != default(string)) {
                    hash = hash * 23 + TaxID.GetHashCode();
                }
                if (BankAccount != default(BankAccount)) {
                    hash = hash * 23 + BankAccount.GetHashCode();
                }
                if (FailureCode != default(string?)) {
                    hash = hash * 23 + FailureCode.GetHashCode();
                }
                if (Deleted != default(bool)) {
                    hash = hash * 23 + Deleted.GetHashCode();
                }
                if (Default != default(bool)) {
                    hash = hash * 23 + Default.GetHashCode();
                }
                if (TaxId != default(string?)) {
                    hash = hash * 23 + TaxId.GetHashCode();
                }
                if (Schedule != default(string)) {
                    hash = hash * 23 + Schedule.GetHashCode();
                }
                if (Metadata != default(IDictionary<string,object>)) {
                    hash = hash * 23 + Metadata.GetHashCode();
                }
                if (VerifiedAt != default(DateTime)) {
                    hash = hash * 23 + VerifiedAt.GetHashCode();
                }
                if (ActivatedAt != default(DateTime)) {
                    hash = hash * 23 + ActivatedAt.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class Refund : ModelBase {
        [JsonProperty("amount")]
        public long Amount { get; set; }
        [JsonProperty("currency")]
        public string Currency { get; set; }
        [JsonProperty("charge")]
        public string Charge { get; set; }
        [JsonProperty("transaction")]
        public string Transaction { get; set; }
        [JsonProperty("metadata")]
        public IDictionary<string,object> Metadata { get; set; }
        [JsonProperty("voided")]
        public bool Voided { get; set; }
        [JsonProperty("terminal")]
        public string? Terminal { get; set; }
        [JsonProperty("status")]
        public string Status { get; set; }
        [JsonProperty("funding_amount")]
        public long FundingAmount { get; set; }
        [JsonProperty("funding_currency")]
        public string FundingCurrency { get; set; }
        [JsonProperty("acquirer_reference_number")]
        public string? AcquirerReferenceNumber { get; set; }
        [JsonProperty("merchant_name")]
        public string MerchantName { get; set; }
        [JsonProperty("merchant_uid")]
        public string MerchantUid { get; set; }
        [JsonProperty("approval_code")]
        public string? ApprovalCode { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as Refund;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.Amount, another.Amount) &&
                object.Equals(this.Currency, another.Currency) &&
                object.Equals(this.Charge, another.Charge) &&
                object.Equals(this.Transaction, another.Transaction) &&
                object.Equals(this.Metadata, another.Metadata) &&
                object.Equals(this.Voided, another.Voided) &&
                object.Equals(this.Terminal, another.Terminal) &&
                object.Equals(this.Status, another.Status) &&
                object.Equals(this.FundingAmount, another.FundingAmount) &&
                object.Equals(this.FundingCurrency, another.FundingCurrency) &&
                object.Equals(this.AcquirerReferenceNumber, another.AcquirerReferenceNumber) &&
                object.Equals(this.MerchantName, another.MerchantName) &&
                object.Equals(this.MerchantUid, another.MerchantUid) &&
                object.Equals(this.ApprovalCode, another.ApprovalCode) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (Amount != default(long)) {
                    hash = hash * 23 + Amount.GetHashCode();
                }
                if (Currency != default(string)) {
                    hash = hash * 23 + Currency.GetHashCode();
                }
                if (Charge != default(string)) {
                    hash = hash * 23 + Charge.GetHashCode();
                }
                if (Transaction != default(string)) {
                    hash = hash * 23 + Transaction.GetHashCode();
                }
                if (Metadata != default(IDictionary<string,object>)) {
                    hash = hash * 23 + Metadata.GetHashCode();
                }
                if (Voided != default(bool)) {
                    hash = hash * 23 + Voided.GetHashCode();
                }
                if (Terminal != default(string?)) {
                    hash = hash * 23 + Terminal.GetHashCode();
                }
                if (Status != default(string)) {
                    hash = hash * 23 + Status.GetHashCode();
                }
                if (FundingAmount != default(long)) {
                    hash = hash * 23 + FundingAmount.GetHashCode();
                }
                if (FundingCurrency != default(string)) {
                    hash = hash * 23 + FundingCurrency.GetHashCode();
                }
                if (AcquirerReferenceNumber != default(string?)) {
                    hash = hash * 23 + AcquirerReferenceNumber.GetHashCode();
                }
                if (MerchantName != default(string)) {
                    hash = hash * 23 + MerchantName.GetHashCode();
                }
                if (MerchantUid != default(string)) {
                    hash = hash * 23 + MerchantUid.GetHashCode();
                }
                if (ApprovalCode != default(string?)) {
                    hash = hash * 23 + ApprovalCode.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class Schedule : ModelBase {
        [JsonProperty("status")]
        public ScheduleStatus Status { get; set; }
        [JsonProperty("every")]
        public int Every { get; set; }
        [JsonProperty("period")]
        public SchedulePeriod Period { get; set; }
        [JsonProperty("on")]
        public ScheduleOn On { get; set; }
        [JsonProperty("in_words")]
        public String InWords { get; set; }
        [JsonProperty("charge")]
        public ChargeScheduling Charge { get; set; }
        [JsonProperty("transfer")]
        public TransferScheduling Transfer { get; set; }
        [JsonProperty("occurrences")]
        public ScopedList<Occurrence> Occurrences { get; set; }
        [JsonProperty("next_occurrences")]
        public ScopedList<Occurrence> NextOccurrences { get; set; }
        [JsonProperty("deleted")]
        public bool Deleted { get; set; }
        [JsonProperty("active")]
        public bool Active { get; set; }
        [JsonProperty("state")]
        public string State { get; set; }
        [JsonProperty("ended_at")]
        public DateTime EndedAt { get; set; }
        [JsonProperty("start_on")]
        public DateTime StartOn { get; set; }
        [JsonProperty("end_on")]
        public DateTime EndOn { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as Schedule;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.Status, another.Status) &&
                object.Equals(this.Every, another.Every) &&
                object.Equals(this.Period, another.Period) &&
                object.Equals(this.On, another.On) &&
                object.Equals(this.InWords, another.InWords) &&
                object.Equals(this.Charge, another.Charge) &&
                object.Equals(this.Transfer, another.Transfer) &&
                object.Equals(this.Occurrences, another.Occurrences) &&
                object.Equals(this.NextOccurrences, another.NextOccurrences) &&
                object.Equals(this.Deleted, another.Deleted) &&
                object.Equals(this.Active, another.Active) &&
                object.Equals(this.State, another.State) &&
                object.Equals(this.EndedAt, another.EndedAt) &&
                object.Equals(this.StartOn, another.StartOn) &&
                object.Equals(this.EndOn, another.EndOn) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (Status != default(ScheduleStatus)) {
                    hash = hash * 23 + Status.GetHashCode();
                }
                if (Every != default(int)) {
                    hash = hash * 23 + Every.GetHashCode();
                }
                if (Period != default(SchedulePeriod)) {
                    hash = hash * 23 + Period.GetHashCode();
                }
                if (On != default(ScheduleOn)) {
                    hash = hash * 23 + On.GetHashCode();
                }
                if (InWords != default(String)) {
                    hash = hash * 23 + InWords.GetHashCode();
                }
                if (Charge != default(ChargeScheduling)) {
                    hash = hash * 23 + Charge.GetHashCode();
                }
                if (Transfer != default(TransferScheduling)) {
                    hash = hash * 23 + Transfer.GetHashCode();
                }
                if (Occurrences != default(ScopedList<Occurrence>)) {
                    hash = hash * 23 + Occurrences.GetHashCode();
                }
                if (NextOccurrences != default(ScopedList<Occurrence>)) {
                    hash = hash * 23 + NextOccurrences.GetHashCode();
                }
                if (Deleted != default(bool)) {
                    hash = hash * 23 + Deleted.GetHashCode();
                }
                if (Active != default(bool)) {
                    hash = hash * 23 + Active.GetHashCode();
                }
                if (State != default(string)) {
                    hash = hash * 23 + State.GetHashCode();
                }
                if (EndedAt != default(DateTime)) {
                    hash = hash * 23 + EndedAt.GetHashCode();
                }
                if (StartOn != default(DateTime)) {
                    hash = hash * 23 + StartOn.GetHashCode();
                }
                if (EndOn != default(DateTime)) {
                    hash = hash * 23 + EndOn.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class ChargeScheduling : ModelBase {
        [JsonProperty("currency")]
        public string Currency { get; set; }
        [JsonProperty("amount")]
        public long Amount { get; set; }
        [JsonProperty("default_card")]
        public string DefaultCard { get; set; }
        [JsonProperty("card")]
        public string Card { get; set; }
        [JsonProperty("customer")]
        public string Customer { get; set; }
        [JsonProperty("linked_account")]
        public string LinkedAccount { get; set; }
        [JsonProperty("description")]
        public string Description { get; set; }
        [JsonProperty("metadata")]
        public IDictionary<string,object> Metadata { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as ChargeScheduling;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.Currency, another.Currency) &&
                object.Equals(this.Amount, another.Amount) &&
                object.Equals(this.DefaultCard, another.DefaultCard) &&
                object.Equals(this.Card, another.Card) &&
                object.Equals(this.Customer, another.Customer) &&
                object.Equals(this.LinkedAccount, another.LinkedAccount) &&
                object.Equals(this.Description, another.Description) &&
                object.Equals(this.Metadata, another.Metadata) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (Currency != default(string)) {
                    hash = hash * 23 + Currency.GetHashCode();
                }
                if (Amount != default(long)) {
                    hash = hash * 23 + Amount.GetHashCode();
                }
                if (DefaultCard != default(string)) {
                    hash = hash * 23 + DefaultCard.GetHashCode();
                }
                if (Card != default(string)) {
                    hash = hash * 23 + Card.GetHashCode();
                }
                if (Customer != default(string)) {
                    hash = hash * 23 + Customer.GetHashCode();
                }
                if (LinkedAccount != default(string)) {
                    hash = hash * 23 + LinkedAccount.GetHashCode();
                }
                if (Description != default(string)) {
                    hash = hash * 23 + Description.GetHashCode();
                }
                if (Metadata != default(IDictionary<string,object>)) {
                    hash = hash * 23 + Metadata.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class ScheduleOn : ModelBase {
        [JsonProperty("weekdays")]
        public Weekdays[] Weekdays { get; set; }
        [JsonProperty("days_of_month")]
        public int[] DaysOfMonth { get; set; }
        [JsonProperty("weekday_of_month")]
        public String WeekdayOfMonth { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as ScheduleOn;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.Weekdays, another.Weekdays) &&
                object.Equals(this.DaysOfMonth, another.DaysOfMonth) &&
                object.Equals(this.WeekdayOfMonth, another.WeekdayOfMonth) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (Weekdays != default(Weekdays[])) {
                    hash = hash * 23 + Weekdays.GetHashCode();
                }
                if (DaysOfMonth != default(int[])) {
                    hash = hash * 23 + DaysOfMonth.GetHashCode();
                }
                if (WeekdayOfMonth != default(String)) {
                    hash = hash * 23 + WeekdayOfMonth.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class Token : ModelBase {
        [JsonProperty("used")]
        public bool Used { get; set; }
        [JsonProperty("card")]
        public Card Card { get; set; }
        [JsonProperty("charge_status")]
        public ChargeStatus ChargeStatus { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as Token;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.Used, another.Used) &&
                object.Equals(this.Card, another.Card) &&
                object.Equals(this.ChargeStatus, another.ChargeStatus) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (Used != default(bool)) {
                    hash = hash * 23 + Used.GetHashCode();
                }
                if (Card != default(Card)) {
                    hash = hash * 23 + Card.GetHashCode();
                }
                if (ChargeStatus != default(ChargeStatus)) {
                    hash = hash * 23 + ChargeStatus.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class Transaction : ModelBase {
        [JsonProperty("amount")]
        public long Amount { get; set; }
        [JsonProperty("currency")]
        public string Currency { get; set; }
        [JsonProperty("type")]
        public TransactionType Type { get; set; }
        [JsonProperty("source")]
        public string Source { get; set; }
        [JsonProperty("direction")]
        public string Direction { get; set; }
        [JsonProperty("key")]
        public string Key { get; set; }
        [JsonProperty("origin")]
        public string Origin { get; set; }
        [JsonProperty("transferable_at")]
        public DateTime TransferableAt { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as Transaction;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.Amount, another.Amount) &&
                object.Equals(this.Currency, another.Currency) &&
                object.Equals(this.Type, another.Type) &&
                object.Equals(this.Source, another.Source) &&
                object.Equals(this.Direction, another.Direction) &&
                object.Equals(this.Key, another.Key) &&
                object.Equals(this.Origin, another.Origin) &&
                object.Equals(this.TransferableAt, another.TransferableAt) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (Amount != default(long)) {
                    hash = hash * 23 + Amount.GetHashCode();
                }
                if (Currency != default(string)) {
                    hash = hash * 23 + Currency.GetHashCode();
                }
                if (Type != default(TransactionType)) {
                    hash = hash * 23 + Type.GetHashCode();
                }
                if (Source != default(string)) {
                    hash = hash * 23 + Source.GetHashCode();
                }
                if (Direction != default(string)) {
                    hash = hash * 23 + Direction.GetHashCode();
                }
                if (Key != default(string)) {
                    hash = hash * 23 + Key.GetHashCode();
                }
                if (Origin != default(string)) {
                    hash = hash * 23 + Origin.GetHashCode();
                }
                if (TransferableAt != default(DateTime)) {
                    hash = hash * 23 + TransferableAt.GetHashCode();
                }

                return hash;
            }
        }
    }

    public partial class Transfer : ModelBase {
        [JsonProperty("recipient")]
        public string Recipient { get; set; }
        [JsonProperty("bank_account")]
        public BankAccount BankAccount { get; set; }
        [JsonProperty("sent")]
        public bool Sent { get; set; }
        [JsonProperty("paid")]
        public bool Paid { get; set; }
        [JsonProperty("fee")]
        public long Fee { get; set; }
        [JsonProperty("amount")]
        public long Amount { get; set; }
        [JsonProperty("currency")]
        public string Currency { get; set; }
        [JsonProperty("fail_fast")]
        public bool FailFast { get; set; }
        [JsonProperty("failure_code")]
        public string? FailureCode { get; set; }
        [JsonProperty("failure_message")]
        public string? FailureMessage { get; set; }
        [JsonProperty("deleted")]
        public bool Deleted { get; set; }
        [JsonProperty("sendable")]
        public bool Sendable { get; set; }
        [JsonProperty("metadata")]
        public IDictionary<string,object> Metadata { get; set; }
        [JsonProperty("paid_at")]
        public DateTime PaidAt { get; set; }
        [JsonProperty("sent_at")]
        public DateTime SentAt { get; set; }
        [JsonProperty("transactions")]
        public ScopedList<Transaction> Transactions { get; set; }
        [JsonProperty("schedule")]
        public string Schedule { get; set; }
        [JsonProperty("fee_vat")]
        public long FeeVat { get; set; }
        [JsonProperty("net")]
        public long Net { get; set; }
        [JsonProperty("total_fee")]
        public long TotalFee { get; set; }
        [JsonProperty("merchant_name")]
        public string MerchantName { get; set; }
        [JsonProperty("merchant_uid")]
        public string MerchantUid { get; set; }

        public override bool Equals(object obj) {
            if (obj == null) return false;
            var another = obj as Transfer;
            if (another == null) return false;

            return base.Equals(obj) &&
                object.Equals(this.Recipient, another.Recipient) &&
                object.Equals(this.BankAccount, another.BankAccount) &&
                object.Equals(this.Sent, another.Sent) &&
                object.Equals(this.Paid, another.Paid) &&
                object.Equals(this.Fee, another.Fee) &&
                object.Equals(this.Amount, another.Amount) &&
                object.Equals(this.Currency, another.Currency) &&
                object.Equals(this.FailFast, another.FailFast) &&
                object.Equals(this.FailureCode, another.FailureCode) &&
                object.Equals(this.FailureMessage, another.FailureMessage) &&
                object.Equals(this.Deleted, another.Deleted) &&
                object.Equals(this.Sendable, another.Sendable) &&
                object.Equals(this.Metadata, another.Metadata) &&
                object.Equals(this.PaidAt, another.PaidAt) &&
                object.Equals(this.SentAt, another.SentAt) &&
                object.Equals(this.Transactions, another.Transactions) &&
                object.Equals(this.Schedule, another.Schedule) &&
                object.Equals(this.FeeVat, another.FeeVat) &&
                object.Equals(this.Net, another.Net) &&
                object.Equals(this.TotalFee, another.TotalFee) &&
                object.Equals(this.MerchantName, another.MerchantName) &&
                object.Equals(this.MerchantUid, another.MerchantUid) &&
                true;
        }

        public override int GetHashCode() {
            unchecked {
                int hash = 17;
                if (Recipient != default(string)) {
                    hash = hash * 23 + Recipient.GetHashCode();
                }
                if (BankAccount != default(BankAccount)) {
                    hash = hash * 23 + BankAccount.GetHashCode();
                }
                if (Sent != default(bool)) {
                    hash = hash * 23 + Sent.GetHashCode();
                }
                if (Paid != default(bool)) {
                    hash = hash * 23 + Paid.GetHashCode();
                }
                if (Fee != default(long)) {
                    hash = hash * 23 + Fee.GetHashCode();
                }
                if (Amount != default(long)) {
                    hash = hash * 23 + Amount.GetHashCode();
                }
                if (Currency != default(string)) {
                    hash = hash * 23 + Currency.GetHashCode();
                }
                if (FailFast != default(bool)) {
                    hash = hash * 23 + FailFast.GetHashCode();
                }
                if (FailureCode != default(string?)) {
                    hash = hash * 23 + FailureCode.GetHashCode();
                }
                if (FailureMessage != default(string?)) {
                    hash = hash * 23 + FailureMessage.GetHashCode();
                }
                if (Deleted != default(bool)) {
                    hash = hash * 23 + Deleted.GetHashCode();
                }
                if (Sendable != default(bool)) {
                    hash = hash * 23 + Sendable.GetHashCode();
                }
                if (Metadata != default(IDictionary<string,object>)) {
                    hash = hash * 23 + Metadata.GetHashCode();
                }
                if (PaidAt != default(DateTime)) {
                    hash = hash * 23 + PaidAt.GetHashCode();
                }
                if (SentAt != default(DateTime)) {
                    hash = hash * 23 + SentAt.GetHashCode();
                }
                if (Transactions != default(ScopedList<Transaction>)) {
                    hash = hash * 23 + Transactions.GetHashCode();
                }
                if (Schedule != default(string)) {
                    hash = hash * 23 + Schedule.GetHashCode();
                }
                if (FeeVat != default(long)) {
                    hash = hash * 23 + FeeVat.GetHashCode();
                }
                if (Net != default(long)) {
                    hash = hash * 23 + Net.GetHashCode();
                }
                if (TotalFee != default(long)) {
                    hash = hash * 23 + TotalFee.GetHashCode();
                }
                if (MerchantName != default(string)) {
                    hash = hash * 23 + MerchantName.GetHashCode();
                }
                if (MerchantUid != default(string)) {
                    hash = hash * 23 + MerchantUid.GetHashCode();
                }

                return hash;
            }
        }
    }


    public partial class ModelTypes {
        static readonly IDictionary<string, Type> lookup = new Dictionary<string, Type>
        {
            { "account", typeof(Account) },
            { "balance", typeof(Balance) },
            { "bank", typeof(Bank) },
            { "barcode", typeof(Barcode) },
            { "bank_account", typeof(BankAccount) },
            { "capability", typeof(Capability) },
            { "limits", typeof(Limits) },
            { "maxmin", typeof(MaxMin) },
            { "min", typeof(Min) },
            { "card", typeof(Card) },
            { "charge", typeof(Charge) },
            { "linkedaccount", typeof(LinkedAccount) },
            { "unmanagedpayment", typeof(UnmanagedPayment) },
            { "transactionfees", typeof(TransactionFees) },
            { "platformfee", typeof(PlatformFee) },
            { "customer", typeof(Customer) },
            { "dispute", typeof(Dispute) },
            { "document", typeof(Document) },
            { "event", typeof(Event) },
            { "forex", typeof(Forex) },
            { "link", typeof(Link) },
            { "occurrence", typeof(Occurrence) },
            { "paymentmethod", typeof(PaymentMethod) },
            { "paymentreference", typeof(PaymentReference) },
            { "providerreference", typeof(ProviderReference) },
            { "paymentsource", typeof(PaymentSource) },
            { "billing", typeof(Billing) },
            { "shipping", typeof(Shipping) },
            { "item", typeof(Item) },
            { "receipt", typeof(Receipt) },
            { "recipient", typeof(Recipient) },
            { "refund", typeof(Refund) },
            { "schedule", typeof(Schedule) },
            { "chargescheduling", typeof(ChargeScheduling) },
            { "scheduleon", typeof(ScheduleOn) },
            { "token", typeof(Token) },
            { "transaction", typeof(Transaction) },
            { "transfer", typeof(Transfer) },
        };

        static readonly IDictionary<Type, string> reverseLookup = new Dictionary<Type, string>
        {
            { typeof(Account), "account" },
            { typeof(Balance), "balance" },
            { typeof(Bank), "bank" },
            { typeof(Barcode), "barcode" },
            { typeof(BankAccount), "bank_account" },
            { typeof(Capability), "capability" },
            { typeof(Limits), "limits" },
            { typeof(MaxMin), "maxmin" },
            { typeof(Min), "min" },
            { typeof(Card), "card" },
            { typeof(Charge), "charge" },
            { typeof(LinkedAccount), "linkedaccount" },
            { typeof(UnmanagedPayment), "unmanagedpayment" },
            { typeof(TransactionFees), "transactionfees" },
            { typeof(PlatformFee), "platformfee" },
            { typeof(Customer), "customer" },
            { typeof(Dispute), "dispute" },
            { typeof(Document), "document" },
            { typeof(Event), "event" },
            { typeof(Forex), "forex" },
            { typeof(Link), "link" },
            { typeof(Occurrence), "occurrence" },
            { typeof(PaymentMethod), "paymentmethod" },
            { typeof(PaymentReference), "paymentreference" },
            { typeof(ProviderReference), "providerreference" },
            { typeof(PaymentSource), "paymentsource" },
            { typeof(Billing), "billing" },
            { typeof(Shipping), "shipping" },
            { typeof(Item), "item" },
            { typeof(Receipt), "receipt" },
            { typeof(Recipient), "recipient" },
            { typeof(Refund), "refund" },
            { typeof(Schedule), "schedule" },
            { typeof(ChargeScheduling), "chargescheduling" },
            { typeof(ScheduleOn), "scheduleon" },
            { typeof(Token), "token" },
            { typeof(Transaction), "transaction" },
            { typeof(Transfer), "transfer" },
        };
    }
}
